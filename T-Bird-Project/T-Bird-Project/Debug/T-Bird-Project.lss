
T-Bird-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000252  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000002e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af0  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042e  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000337  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000024bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a5 c0       	rjmp	.+330    	; 0x18c <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1f d0       	rcall	.+62     	; 0x102 <main>
  c4:	c4 c0       	rjmp	.+392    	; 0x24e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init>:

void init()
{
	// Ha bit 1 akkor kimenet, ha bit 0 akkor bemenet
	
	DDRB = 0xF0;	// Led 0-3 -> 11110000
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xF0;	// Led 4-7 - 11110000
  cc:	81 bb       	out	0x11, r24	; 17
	DDRG = 0x00;	// Pushbuttons K0-K4
  ce:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	DDRC = 0x88;	// Keyboard, -> 10001000 || Red, KBD1row?
  d2:	88 e8       	ldi	r24, 0x88	; 136
  d4:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x0C;	// RGB led -> 00001100 || Green, Blue
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	82 b9       	out	0x02, r24	; 2
	
	DDRA = 0xFF;	// 7 Segment display
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8a bb       	out	0x1a, r24	; 26
	
	
	// Timer init:
	//TCCR0 = 1 << CS02 | 0 << CS01 | 0 << CS00;
	TCCR0 = 1 << CS01 | 1 << CS00;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	87 bf       	out	0x37, r24	; 55
	sei();
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <sevenSegment_PutDigit>:
}

void sevenSegment_PutDigit(uint8_t digit, uint8_t num)
{
	if (digit > 3)
  ea:	84 30       	cpi	r24, 0x04	; 4
  ec:	48 f4       	brcc	.+18     	; 0x100 <sevenSegment_PutDigit+0x16>
		return;
	if (num > 9)
  ee:	6a 30       	cpi	r22, 0x0A	; 10
  f0:	38 f4       	brcc	.+14     	; 0x100 <sevenSegment_PutDigit+0x16>
		return;

	PORTA = 0x80 | (digit) << 4 | num;
  f2:	20 e1       	ldi	r18, 0x10	; 16
  f4:	82 9f       	mul	r24, r18
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	86 2b       	or	r24, r22
  fc:	80 68       	ori	r24, 0x80	; 128
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	08 95       	ret

00000102 <main>:



int main(void)
{
	init();
 102:	e2 df       	rcall	.-60     	; 0xc8 <init>
	
	sevenSegment_PutDigit(2,1);
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	f0 df       	rcall	.-32     	; 0xea <sevenSegment_PutDigit>
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x8>

0000010c <sevenSegment_PutNumber>:

	PORTA = 0x80 | (digit) << 4 | num;
}

void sevenSegment_PutNumber(int num)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	// Digit valaszto:			// Helyiertekek
	digit[0] = num%10;			// egyes
 112:	2a e0       	ldi	r18, 0x0A	; 10
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	b9 01       	movw	r22, r18
 118:	73 d0       	rcall	.+230    	; 0x200 <__divmodhi4>
 11a:	e4 e0       	ldi	r30, 0x04	; 4
 11c:	f1 e0       	ldi	r31, 0x01	; 1
 11e:	80 83       	st	Z, r24
	digit[1] = (num/10)%10;		// tizes
 120:	cb 01       	movw	r24, r22
 122:	b9 01       	movw	r22, r18
 124:	6d d0       	rcall	.+218    	; 0x200 <__divmodhi4>
 126:	81 83       	std	Z+1, r24	; 0x01
	digit[2] = (num/100)%10;	// szazas
 128:	ce 01       	movw	r24, r28
 12a:	64 e6       	ldi	r22, 0x64	; 100
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	68 d0       	rcall	.+208    	; 0x200 <__divmodhi4>
 130:	cb 01       	movw	r24, r22
 132:	b9 01       	movw	r22, r18
 134:	65 d0       	rcall	.+202    	; 0x200 <__divmodhi4>
 136:	82 83       	std	Z+2, r24	; 0x02
	digit[3] = (num/1000)%10;	// ezrese
 138:	ce 01       	movw	r24, r28
 13a:	68 ee       	ldi	r22, 0xE8	; 232
 13c:	73 e0       	ldi	r23, 0x03	; 3
 13e:	60 d0       	rcall	.+192    	; 0x200 <__divmodhi4>
 140:	cb 01       	movw	r24, r22
 142:	b9 01       	movw	r22, r18
 144:	5d d0       	rcall	.+186    	; 0x200 <__divmodhi4>
 146:	83 83       	std	Z+3, r24	; 0x03
 148:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
	
	j = (j + 1) % 4;			// Hany Digites
 14c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	83 70       	andi	r24, 0x03	; 3
 154:	90 78       	andi	r25, 0x80	; 128
 156:	99 23       	and	r25, r25
 158:	24 f4       	brge	.+8      	; 0x162 <sevenSegment_PutNumber+0x56>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	8c 6f       	ori	r24, 0xFC	; 252
 15e:	9f 6f       	ori	r25, 0xFF	; 255
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 166:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	sevenSegment_PutDigit(j, digit[j]);
 16a:	fc 01       	movw	r30, r24
 16c:	ec 5f       	subi	r30, 0xFC	; 252
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	60 81       	ld	r22, Z
 172:	bb df       	rcall	.-138    	; 0xea <sevenSegment_PutDigit>
 174:	df 91       	pop	r29
	
}
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <ledOut>:
 17a:	98 2f       	mov	r25, r24

void ledOut(uint8_t led)
{
	PORTD = (led & 0xF0);
 17c:	90 7f       	andi	r25, 0xF0	; 240
 17e:	92 bb       	out	0x12, r25	; 18
	PORTB = ((led << 4) & 0xF0);
 180:	20 e1       	ldi	r18, 0x10	; 16
 182:	82 9f       	mul	r24, r18
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	88 bb       	out	0x18, r24	; 24
 18a:	08 95       	ret

0000018c <__vector_16>:
		
	}
}

ISR(TIMER0_OVF_vect)
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	0b b6       	in	r0, 0x3b	; 59
 198:	0f 92       	push	r0
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	sevenSegment_PutNumber(1234);
 1b2:	82 ed       	ldi	r24, 0xD2	; 210
 1b4:	94 e0       	ldi	r25, 0x04	; 4
 1b6:	aa df       	rcall	.-172    	; 0x10c <sevenSegment_PutNumber>
	if (!ido--)
 1b8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ido>
 1bc:	9f ef       	ldi	r25, 0xFF	; 255
 1be:	98 0f       	add	r25, r24
 1c0:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <ido>
 1c4:	81 11       	cpse	r24, r1
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <__vector_16+0x4e>
	{
		ledOut(leds);
 1c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1cc:	d6 df       	rcall	.-84     	; 0x17a <ledOut>
		leds = leds ^ 0x01;
 1ce:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	89 27       	eor	r24, r25
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	bf 91       	pop	r27
 1e0:	af 91       	pop	r26
 1e2:	9f 91       	pop	r25
 1e4:	8f 91       	pop	r24
 1e6:	7f 91       	pop	r23
 1e8:	6f 91       	pop	r22
 1ea:	5f 91       	pop	r21
 1ec:	4f 91       	pop	r20
 1ee:	3f 91       	pop	r19
 1f0:	2f 91       	pop	r18
 1f2:	0f 90       	pop	r0
 1f4:	0b be       	out	0x3b, r0	; 59
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__divmodhi4>:
 200:	97 fb       	bst	r25, 7
 202:	07 2e       	mov	r0, r23
 204:	16 f4       	brtc	.+4      	; 0x20a <__divmodhi4+0xa>
 206:	00 94       	com	r0
 208:	06 d0       	rcall	.+12     	; 0x216 <__divmodhi4_neg1>
 20a:	77 fd       	sbrc	r23, 7
 20c:	08 d0       	rcall	.+16     	; 0x21e <__divmodhi4_neg2>
 20e:	0b d0       	rcall	.+22     	; 0x226 <__udivmodhi4>
 210:	07 fc       	sbrc	r0, 7
 212:	05 d0       	rcall	.+10     	; 0x21e <__divmodhi4_neg2>
 214:	3e f4       	brtc	.+14     	; 0x224 <__divmodhi4_exit>

00000216 <__divmodhi4_neg1>:
 216:	90 95       	com	r25
 218:	81 95       	neg	r24
 21a:	9f 4f       	sbci	r25, 0xFF	; 255
 21c:	08 95       	ret

0000021e <__divmodhi4_neg2>:
 21e:	70 95       	com	r23
 220:	61 95       	neg	r22
 222:	7f 4f       	sbci	r23, 0xFF	; 255

00000224 <__divmodhi4_exit>:
 224:	08 95       	ret

00000226 <__udivmodhi4>:
 226:	aa 1b       	sub	r26, r26
 228:	bb 1b       	sub	r27, r27
 22a:	51 e1       	ldi	r21, 0x11	; 17
 22c:	07 c0       	rjmp	.+14     	; 0x23c <__udivmodhi4_ep>

0000022e <__udivmodhi4_loop>:
 22e:	aa 1f       	adc	r26, r26
 230:	bb 1f       	adc	r27, r27
 232:	a6 17       	cp	r26, r22
 234:	b7 07       	cpc	r27, r23
 236:	10 f0       	brcs	.+4      	; 0x23c <__udivmodhi4_ep>
 238:	a6 1b       	sub	r26, r22
 23a:	b7 0b       	sbc	r27, r23

0000023c <__udivmodhi4_ep>:
 23c:	88 1f       	adc	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	5a 95       	dec	r21
 242:	a9 f7       	brne	.-22     	; 0x22e <__udivmodhi4_loop>
 244:	80 95       	com	r24
 246:	90 95       	com	r25
 248:	bc 01       	movw	r22, r24
 24a:	cd 01       	movw	r24, r26
 24c:	08 95       	ret

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
