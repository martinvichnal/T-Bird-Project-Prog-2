
T-Bird-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004c0  00000554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  0000055a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000058c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a46  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b2  00000000  00000000  0000106e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041e  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00001d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b1  00000000  00000000  000022c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002575  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f3 c0       	rjmp	.+486    	; 0x228 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4a d0       	rcall	.+148    	; 0x158 <main>
  c4:	fb c1       	rjmp	.+1014   	; 0x4bc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <waitMs1>:
void timer_init();
void rgbLed(double d);

void waitMs1(){_delay_ms(1);}
void waitMs(int ms){while (ms-->0){waitMs1();}}
void waitSec(int sec){while (sec-->0){waitMs(1000);}}
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <waitMs1+0x4>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <waitMs1+0xa>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <waitMs>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	02 c0       	rjmp	.+4      	; 0xe0 <waitMs+0xa>
  dc:	f5 df       	rcall	.-22     	; 0xc8 <waitMs1>
  de:	ce 01       	movw	r24, r28
  e0:	ec 01       	movw	r28, r24
  e2:	21 97       	sbiw	r28, 0x01	; 1
  e4:	18 16       	cp	r1, r24
  e6:	19 06       	cpc	r1, r25
  e8:	cc f3       	brlt	.-14     	; 0xdc <waitMs+0x6>
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <rgbLed>:
		}
		rgbLed(d);
	}
}
void rgbLed(double d)
{
  f0:	cf 92       	push	r12
  f2:	df 92       	push	r13
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
	// RED -> C7 (0x80), GREEN -> E2 (0x04), BLUE -> E3 (0x08)
	
	// RED
	PORTC = 0x88;
  f8:	28 e8       	ldi	r18, 0x88	; 136
  fa:	25 bb       	out	0x15, r18	; 21
	//_delay_ms(1000);
	waitMs(d);
  fc:	35 d1       	rcall	.+618    	; 0x368 <__fixsfsi>
  fe:	6b 01       	movw	r12, r22
 100:	7c 01       	movw	r14, r24
 102:	cb 01       	movw	r24, r22
 104:	e8 df       	rcall	.-48     	; 0xd6 <waitMs>
	PORTC = 0x00;
 106:	15 ba       	out	0x15, r1	; 21
	
	// GREEN
	PORTE = 0x04;
 108:	84 e0       	ldi	r24, 0x04	; 4
	//_delay_ms(1000);
	waitMs(d);
 10a:	83 b9       	out	0x03, r24	; 3
 10c:	c6 01       	movw	r24, r12
 10e:	e3 df       	rcall	.-58     	; 0xd6 <waitMs>
	PORTE = 0x00;
 110:	13 b8       	out	0x03, r1	; 3
	
	// BLUE
	PORTE = 0x08;
 112:	88 e0       	ldi	r24, 0x08	; 8
	//_delay_ms(1000);
	waitMs(d);
 114:	83 b9       	out	0x03, r24	; 3
 116:	c6 01       	movw	r24, r12
 118:	de df       	rcall	.-68     	; 0xd6 <waitMs>
	PORTE = 0x00;
 11a:	13 b8       	out	0x03, r1	; 3

}
 11c:	ff 90       	pop	r15
 11e:	ef 90       	pop	r14
 120:	df 90       	pop	r13
 122:	cf 90       	pop	r12
 124:	08 95       	ret

00000126 <port_inti>:

void port_inti()
{
	// Ha bit 1 akkor kimenet, ha bit 0 akkor bemenet
	
	DDRB = 0xF0;	// Led 0-3 -> 11110000
 126:	80 ef       	ldi	r24, 0xF0	; 240
 128:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xF0;	// Led 4-7 - 11110000
 12a:	81 bb       	out	0x11, r24	; 17
	DDRG = 0x00;	// Pushbuttons K0-K4
 12c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	DDRC = 0x88;		// Keyboard, -> 10001000 || Red, KBD1row?
 130:	88 e8       	ldi	r24, 0x88	; 136
 132:	84 bb       	out	0x14, r24	; 20
	DDRE = 0x0C;		// RGB led -> 00001100 || Green, Blue
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	82 b9       	out	0x02, r24	; 2
 138:	08 95       	ret

0000013a <ledOut>:
}

void ledOut(uint8_t led)
{
	PORTD = (led & 0xF0);
 13a:	98 2f       	mov	r25, r24
 13c:	90 7f       	andi	r25, 0xF0	; 240
 13e:	92 bb       	out	0x12, r25	; 18
	PORTB = ((led << 4) & 0xF0);
 140:	20 e1       	ldi	r18, 0x10	; 16
 142:	82 9f       	mul	r24, r18
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	88 bb       	out	0x18, r24	; 24
 14a:	08 95       	ret

0000014c <timer_init>:
}


void timer_init()
{
	TCCR0 = 1 << CS02 | 0 << CS01 | 0 << CS00;
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	87 bf       	out	0x37, r24	; 55
	sei();
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <main>:

double d = 1000;

int main(void)
{
	port_inti();
 158:	e6 df       	rcall	.-52     	; 0x126 <port_inti>
	timer_init();
 15a:	f8 df       	rcall	.-16     	; 0x14c <timer_init>
 15c:	8f ef       	ldi	r24, 0xFF	; 255

	DDRA = 0xFF;
 15e:	8a bb       	out	0x1a, r24	; 26
 160:	81 e8       	ldi	r24, 0x81	; 129
	PORTA = 0b10000001;
 162:	8b bb       	out	0x1b, r24	; 27
 164:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
	
	while (1)
	{
		if (PING == 0x02) // if the 2. button is pressed increase by 100
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	41 f5       	brne	.+80     	; 0x1bc <main+0x64>
 16c:	20 e0       	ldi	r18, 0x00	; 0
		{
			d += 200;
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	48 e4       	ldi	r20, 0x48	; 72
 172:	53 e4       	ldi	r21, 0x43	; 67
 174:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 178:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 17c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 180:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 184:	89 d0       	rcall	.+274    	; 0x298 <__addsf3>
 186:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 18a:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 192:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 196:	20 e0       	ldi	r18, 0x00	; 0
			if (d > 10000) // delay protection
 198:	30 e4       	ldi	r19, 0x40	; 64
 19a:	4c e1       	ldi	r20, 0x1C	; 28
 19c:	56 e4       	ldi	r21, 0x46	; 70
 19e:	8a d1       	rcall	.+788    	; 0x4b4 <__gesf2>
 1a0:	18 16       	cp	r1, r24
 1a2:	64 f4       	brge	.+24     	; 0x1bc <main+0x64>
 1a4:	80 e0       	ldi	r24, 0x00	; 0
			d = 10000;
 1a6:	90 e4       	ldi	r25, 0x40	; 64
 1a8:	ac e1       	ldi	r26, 0x1C	; 28
 1aa:	b6 e4       	ldi	r27, 0x46	; 70
 1ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1bc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
		}
		if (PING == 0x01) // if the 1. button is pressed decrease by 100
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	41 f5       	brne	.+80     	; 0x214 <main+0xbc>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
		{
			d -= 200;
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	48 e4       	ldi	r20, 0x48	; 72
 1ca:	53 e4       	ldi	r21, 0x43	; 67
 1cc:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1dc:	5c d0       	rcall	.+184    	; 0x296 <__subsf3>
 1de:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1ea:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
			if (d < 50) // delay protection
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	48 e4       	ldi	r20, 0x48	; 72
 1f4:	52 e4       	ldi	r21, 0x42	; 66
 1f6:	b4 d0       	rcall	.+360    	; 0x360 <__cmpsf2>
 1f8:	88 23       	and	r24, r24
 1fa:	64 f4       	brge	.+24     	; 0x214 <main+0xbc>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
			d = 50;
 200:	a8 e4       	ldi	r26, 0x48	; 72
 202:	b2 e4       	ldi	r27, 0x42	; 66
 204:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 208:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 20c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 210:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 214:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
		rgbLed(d);
 218:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 21c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 220:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 224:	65 df       	rcall	.-310    	; 0xf0 <rgbLed>
 226:	9e cf       	rjmp	.-196    	; 0x164 <main+0xc>

00000228 <__vector_16>:
 228:	1f 92       	push	r1
	}
 22a:	0f 92       	push	r0
	TIMSK = 1 << TOIE0;
	sei();
}

ISR(TIMER0_OVF_vect)
{
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	0b b6       	in	r0, 0x3b	; 59
 234:	0f 92       	push	r0
 236:	2f 93       	push	r18
 238:	3f 93       	push	r19
 23a:	4f 93       	push	r20
 23c:	5f 93       	push	r21
 23e:	6f 93       	push	r22
 240:	7f 93       	push	r23
 242:	8f 93       	push	r24
 244:	9f 93       	push	r25
 246:	af 93       	push	r26
 248:	bf 93       	push	r27
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
	if (!ido--)
 24e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 252:	9f ef       	ldi	r25, 0xFF	; 255
 254:	98 0f       	add	r25, r24
 256:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
 25a:	81 11       	cpse	r24, r1
 25c:	09 c0       	rjmp	.+18     	; 0x270 <__vector_16+0x48>
	{
		ledOut(leds);
 25e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <leds>
 262:	6b df       	rcall	.-298    	; 0x13a <ledOut>
		leds = leds ^ 0x01;
 264:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <leds>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	89 27       	eor	r24, r25
 26c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <leds>
	}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	bf 91       	pop	r27
 276:	af 91       	pop	r26
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	7f 91       	pop	r23
 27e:	6f 91       	pop	r22
 280:	5f 91       	pop	r21
 282:	4f 91       	pop	r20
 284:	3f 91       	pop	r19
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0b be       	out	0x3b, r0	; 59
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <__subsf3>:
 296:	50 58       	subi	r21, 0x80	; 128

00000298 <__addsf3>:
 298:	bb 27       	eor	r27, r27
 29a:	aa 27       	eor	r26, r26
 29c:	0e d0       	rcall	.+28     	; 0x2ba <__addsf3x>
 29e:	d0 c0       	rjmp	.+416    	; 0x440 <__fp_round>
 2a0:	c1 d0       	rcall	.+386    	; 0x424 <__fp_pscA>
 2a2:	30 f0       	brcs	.+12     	; 0x2b0 <__addsf3+0x18>
 2a4:	c6 d0       	rcall	.+396    	; 0x432 <__fp_pscB>
 2a6:	20 f0       	brcs	.+8      	; 0x2b0 <__addsf3+0x18>
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <__addsf3+0x1e>
 2aa:	9f 3f       	cpi	r25, 0xFF	; 255
 2ac:	11 f4       	brne	.+4      	; 0x2b2 <__addsf3+0x1a>
 2ae:	1e f4       	brtc	.+6      	; 0x2b6 <__addsf3+0x1e>
 2b0:	b6 c0       	rjmp	.+364    	; 0x41e <__fp_nan>
 2b2:	0e f4       	brtc	.+2      	; 0x2b6 <__addsf3+0x1e>
 2b4:	e0 95       	com	r30
 2b6:	e7 fb       	bst	r30, 7
 2b8:	ac c0       	rjmp	.+344    	; 0x412 <__fp_inf>

000002ba <__addsf3x>:
 2ba:	e9 2f       	mov	r30, r25
 2bc:	d2 d0       	rcall	.+420    	; 0x462 <__fp_split3>
 2be:	80 f3       	brcs	.-32     	; 0x2a0 <__addsf3+0x8>
 2c0:	ba 17       	cp	r27, r26
 2c2:	62 07       	cpc	r22, r18
 2c4:	73 07       	cpc	r23, r19
 2c6:	84 07       	cpc	r24, r20
 2c8:	95 07       	cpc	r25, r21
 2ca:	18 f0       	brcs	.+6      	; 0x2d2 <__addsf3x+0x18>
 2cc:	71 f4       	brne	.+28     	; 0x2ea <__addsf3x+0x30>
 2ce:	9e f5       	brtc	.+102    	; 0x336 <__addsf3x+0x7c>
 2d0:	ea c0       	rjmp	.+468    	; 0x4a6 <__fp_zero>
 2d2:	0e f4       	brtc	.+2      	; 0x2d6 <__addsf3x+0x1c>
 2d4:	e0 95       	com	r30
 2d6:	0b 2e       	mov	r0, r27
 2d8:	ba 2f       	mov	r27, r26
 2da:	a0 2d       	mov	r26, r0
 2dc:	0b 01       	movw	r0, r22
 2de:	b9 01       	movw	r22, r18
 2e0:	90 01       	movw	r18, r0
 2e2:	0c 01       	movw	r0, r24
 2e4:	ca 01       	movw	r24, r20
 2e6:	a0 01       	movw	r20, r0
 2e8:	11 24       	eor	r1, r1
 2ea:	ff 27       	eor	r31, r31
 2ec:	59 1b       	sub	r21, r25
 2ee:	99 f0       	breq	.+38     	; 0x316 <__addsf3x+0x5c>
 2f0:	59 3f       	cpi	r21, 0xF9	; 249
 2f2:	50 f4       	brcc	.+20     	; 0x308 <__addsf3x+0x4e>
 2f4:	50 3e       	cpi	r21, 0xE0	; 224
 2f6:	68 f1       	brcs	.+90     	; 0x352 <__addsf3x+0x98>
 2f8:	1a 16       	cp	r1, r26
 2fa:	f0 40       	sbci	r31, 0x00	; 0
 2fc:	a2 2f       	mov	r26, r18
 2fe:	23 2f       	mov	r18, r19
 300:	34 2f       	mov	r19, r20
 302:	44 27       	eor	r20, r20
 304:	58 5f       	subi	r21, 0xF8	; 248
 306:	f3 cf       	rjmp	.-26     	; 0x2ee <__addsf3x+0x34>
 308:	46 95       	lsr	r20
 30a:	37 95       	ror	r19
 30c:	27 95       	ror	r18
 30e:	a7 95       	ror	r26
 310:	f0 40       	sbci	r31, 0x00	; 0
 312:	53 95       	inc	r21
 314:	c9 f7       	brne	.-14     	; 0x308 <__addsf3x+0x4e>
 316:	7e f4       	brtc	.+30     	; 0x336 <__addsf3x+0x7c>
 318:	1f 16       	cp	r1, r31
 31a:	ba 0b       	sbc	r27, r26
 31c:	62 0b       	sbc	r22, r18
 31e:	73 0b       	sbc	r23, r19
 320:	84 0b       	sbc	r24, r20
 322:	ba f0       	brmi	.+46     	; 0x352 <__addsf3x+0x98>
 324:	91 50       	subi	r25, 0x01	; 1
 326:	a1 f0       	breq	.+40     	; 0x350 <__addsf3x+0x96>
 328:	ff 0f       	add	r31, r31
 32a:	bb 1f       	adc	r27, r27
 32c:	66 1f       	adc	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	88 1f       	adc	r24, r24
 332:	c2 f7       	brpl	.-16     	; 0x324 <__addsf3x+0x6a>
 334:	0e c0       	rjmp	.+28     	; 0x352 <__addsf3x+0x98>
 336:	ba 0f       	add	r27, r26
 338:	62 1f       	adc	r22, r18
 33a:	73 1f       	adc	r23, r19
 33c:	84 1f       	adc	r24, r20
 33e:	48 f4       	brcc	.+18     	; 0x352 <__addsf3x+0x98>
 340:	87 95       	ror	r24
 342:	77 95       	ror	r23
 344:	67 95       	ror	r22
 346:	b7 95       	ror	r27
 348:	f7 95       	ror	r31
 34a:	9e 3f       	cpi	r25, 0xFE	; 254
 34c:	08 f0       	brcs	.+2      	; 0x350 <__addsf3x+0x96>
 34e:	b3 cf       	rjmp	.-154    	; 0x2b6 <__addsf3+0x1e>
 350:	93 95       	inc	r25
 352:	88 0f       	add	r24, r24
 354:	08 f0       	brcs	.+2      	; 0x358 <__addsf3x+0x9e>
 356:	99 27       	eor	r25, r25
 358:	ee 0f       	add	r30, r30
 35a:	97 95       	ror	r25
 35c:	87 95       	ror	r24
 35e:	08 95       	ret

00000360 <__cmpsf2>:
 360:	34 d0       	rcall	.+104    	; 0x3ca <__fp_cmp>
 362:	08 f4       	brcc	.+2      	; 0x366 <__cmpsf2+0x6>
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	08 95       	ret

00000368 <__fixsfsi>:
 368:	04 d0       	rcall	.+8      	; 0x372 <__fixunssfsi>
 36a:	68 94       	set
 36c:	b1 11       	cpse	r27, r1
 36e:	9c c0       	rjmp	.+312    	; 0x4a8 <__fp_szero>
 370:	08 95       	ret

00000372 <__fixunssfsi>:
 372:	7f d0       	rcall	.+254    	; 0x472 <__fp_splitA>
 374:	88 f0       	brcs	.+34     	; 0x398 <__fixunssfsi+0x26>
 376:	9f 57       	subi	r25, 0x7F	; 127
 378:	90 f0       	brcs	.+36     	; 0x39e <__fixunssfsi+0x2c>
 37a:	b9 2f       	mov	r27, r25
 37c:	99 27       	eor	r25, r25
 37e:	b7 51       	subi	r27, 0x17	; 23
 380:	a0 f0       	brcs	.+40     	; 0x3aa <__fixunssfsi+0x38>
 382:	d1 f0       	breq	.+52     	; 0x3b8 <__fixunssfsi+0x46>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	88 1f       	adc	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	1a f0       	brmi	.+6      	; 0x394 <__fixunssfsi+0x22>
 38e:	ba 95       	dec	r27
 390:	c9 f7       	brne	.-14     	; 0x384 <__fixunssfsi+0x12>
 392:	12 c0       	rjmp	.+36     	; 0x3b8 <__fixunssfsi+0x46>
 394:	b1 30       	cpi	r27, 0x01	; 1
 396:	81 f0       	breq	.+32     	; 0x3b8 <__fixunssfsi+0x46>
 398:	86 d0       	rcall	.+268    	; 0x4a6 <__fp_zero>
 39a:	b1 e0       	ldi	r27, 0x01	; 1
 39c:	08 95       	ret
 39e:	83 c0       	rjmp	.+262    	; 0x4a6 <__fp_zero>
 3a0:	67 2f       	mov	r22, r23
 3a2:	78 2f       	mov	r23, r24
 3a4:	88 27       	eor	r24, r24
 3a6:	b8 5f       	subi	r27, 0xF8	; 248
 3a8:	39 f0       	breq	.+14     	; 0x3b8 <__fixunssfsi+0x46>
 3aa:	b9 3f       	cpi	r27, 0xF9	; 249
 3ac:	cc f3       	brlt	.-14     	; 0x3a0 <__fixunssfsi+0x2e>
 3ae:	86 95       	lsr	r24
 3b0:	77 95       	ror	r23
 3b2:	67 95       	ror	r22
 3b4:	b3 95       	inc	r27
 3b6:	d9 f7       	brne	.-10     	; 0x3ae <__fixunssfsi+0x3c>
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__fixunssfsi+0x56>
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__fp_cmp>:
 3ca:	99 0f       	add	r25, r25
 3cc:	00 08       	sbc	r0, r0
 3ce:	55 0f       	add	r21, r21
 3d0:	aa 0b       	sbc	r26, r26
 3d2:	e0 e8       	ldi	r30, 0x80	; 128
 3d4:	fe ef       	ldi	r31, 0xFE	; 254
 3d6:	16 16       	cp	r1, r22
 3d8:	17 06       	cpc	r1, r23
 3da:	e8 07       	cpc	r30, r24
 3dc:	f9 07       	cpc	r31, r25
 3de:	c0 f0       	brcs	.+48     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e0:	12 16       	cp	r1, r18
 3e2:	13 06       	cpc	r1, r19
 3e4:	e4 07       	cpc	r30, r20
 3e6:	f5 07       	cpc	r31, r21
 3e8:	98 f0       	brcs	.+38     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3ea:	62 1b       	sub	r22, r18
 3ec:	73 0b       	sbc	r23, r19
 3ee:	84 0b       	sbc	r24, r20
 3f0:	95 0b       	sbc	r25, r21
 3f2:	39 f4       	brne	.+14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f4:	0a 26       	eor	r0, r26
 3f6:	61 f0       	breq	.+24     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f8:	23 2b       	or	r18, r19
 3fa:	24 2b       	or	r18, r20
 3fc:	25 2b       	or	r18, r21
 3fe:	21 f4       	brne	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	08 95       	ret
 402:	0a 26       	eor	r0, r26
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	a1 40       	sbci	r26, 0x01	; 1
 408:	a6 95       	lsr	r26
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	81 1d       	adc	r24, r1
 40e:	81 1d       	adc	r24, r1
 410:	08 95       	ret

00000412 <__fp_inf>:
 412:	97 f9       	bld	r25, 7
 414:	9f 67       	ori	r25, 0x7F	; 127
 416:	80 e8       	ldi	r24, 0x80	; 128
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	08 95       	ret

0000041e <__fp_nan>:
 41e:	9f ef       	ldi	r25, 0xFF	; 255
 420:	80 ec       	ldi	r24, 0xC0	; 192
 422:	08 95       	ret

00000424 <__fp_pscA>:
 424:	00 24       	eor	r0, r0
 426:	0a 94       	dec	r0
 428:	16 16       	cp	r1, r22
 42a:	17 06       	cpc	r1, r23
 42c:	18 06       	cpc	r1, r24
 42e:	09 06       	cpc	r0, r25
 430:	08 95       	ret

00000432 <__fp_pscB>:
 432:	00 24       	eor	r0, r0
 434:	0a 94       	dec	r0
 436:	12 16       	cp	r1, r18
 438:	13 06       	cpc	r1, r19
 43a:	14 06       	cpc	r1, r20
 43c:	05 06       	cpc	r0, r21
 43e:	08 95       	ret

00000440 <__fp_round>:
 440:	09 2e       	mov	r0, r25
 442:	03 94       	inc	r0
 444:	00 0c       	add	r0, r0
 446:	11 f4       	brne	.+4      	; 0x44c <__fp_round+0xc>
 448:	88 23       	and	r24, r24
 44a:	52 f0       	brmi	.+20     	; 0x460 <__fp_round+0x20>
 44c:	bb 0f       	add	r27, r27
 44e:	40 f4       	brcc	.+16     	; 0x460 <__fp_round+0x20>
 450:	bf 2b       	or	r27, r31
 452:	11 f4       	brne	.+4      	; 0x458 <__fp_round+0x18>
 454:	60 ff       	sbrs	r22, 0
 456:	04 c0       	rjmp	.+8      	; 0x460 <__fp_round+0x20>
 458:	6f 5f       	subi	r22, 0xFF	; 255
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	08 95       	ret

00000462 <__fp_split3>:
 462:	57 fd       	sbrc	r21, 7
 464:	90 58       	subi	r25, 0x80	; 128
 466:	44 0f       	add	r20, r20
 468:	55 1f       	adc	r21, r21
 46a:	59 f0       	breq	.+22     	; 0x482 <__fp_splitA+0x10>
 46c:	5f 3f       	cpi	r21, 0xFF	; 255
 46e:	71 f0       	breq	.+28     	; 0x48c <__fp_splitA+0x1a>
 470:	47 95       	ror	r20

00000472 <__fp_splitA>:
 472:	88 0f       	add	r24, r24
 474:	97 fb       	bst	r25, 7
 476:	99 1f       	adc	r25, r25
 478:	61 f0       	breq	.+24     	; 0x492 <__fp_splitA+0x20>
 47a:	9f 3f       	cpi	r25, 0xFF	; 255
 47c:	79 f0       	breq	.+30     	; 0x49c <__fp_splitA+0x2a>
 47e:	87 95       	ror	r24
 480:	08 95       	ret
 482:	12 16       	cp	r1, r18
 484:	13 06       	cpc	r1, r19
 486:	14 06       	cpc	r1, r20
 488:	55 1f       	adc	r21, r21
 48a:	f2 cf       	rjmp	.-28     	; 0x470 <__fp_split3+0xe>
 48c:	46 95       	lsr	r20
 48e:	f1 df       	rcall	.-30     	; 0x472 <__fp_splitA>
 490:	08 c0       	rjmp	.+16     	; 0x4a2 <__fp_splitA+0x30>
 492:	16 16       	cp	r1, r22
 494:	17 06       	cpc	r1, r23
 496:	18 06       	cpc	r1, r24
 498:	99 1f       	adc	r25, r25
 49a:	f1 cf       	rjmp	.-30     	; 0x47e <__fp_splitA+0xc>
 49c:	86 95       	lsr	r24
 49e:	71 05       	cpc	r23, r1
 4a0:	61 05       	cpc	r22, r1
 4a2:	08 94       	sec
 4a4:	08 95       	ret

000004a6 <__fp_zero>:
 4a6:	e8 94       	clt

000004a8 <__fp_szero>:
 4a8:	bb 27       	eor	r27, r27
 4aa:	66 27       	eor	r22, r22
 4ac:	77 27       	eor	r23, r23
 4ae:	cb 01       	movw	r24, r22
 4b0:	97 f9       	bld	r25, 7
 4b2:	08 95       	ret

000004b4 <__gesf2>:
 4b4:	8a df       	rcall	.-236    	; 0x3ca <__fp_cmp>
 4b6:	08 f4       	brcc	.+2      	; 0x4ba <__gesf2+0x6>
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	08 95       	ret

000004bc <_exit>:
 4bc:	f8 94       	cli

000004be <__stop_program>:
 4be:	ff cf       	rjmp	.-2      	; 0x4be <__stop_program>
