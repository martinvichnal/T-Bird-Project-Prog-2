
T-Bird-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000c94  00000d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800108  00800108  00000d30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001729  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da9  00000000  00000000  000025fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d21  00000000  00000000  000033a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  000040c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006eb  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a14  00000000  00000000  00004a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000054af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	04 c1       	rjmp	.+520    	; 0x242 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	d9 c0       	rjmp	.+434    	; 0x1f4 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e0       	ldi	r26, 0x08	; 8
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 32       	cpi	r26, 0x2A	; 42
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7d d2       	rcall	.+1274   	; 0x5be <main>
  c4:	e5 c5       	rjmp	.+3018   	; 0xc90 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_busy>:
}

void lcd_busy(void)
{
	uint8_t busy;
	LCD_DATA_DDR &= ~(1<<PE7); //ott olvassuk majd a BF-et (D7-PE7)
  c8:	82 b1       	in	r24, 0x02	; 2
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	82 b9       	out	0x02, r24	; 2
	LCD_CMD_PORT &= ~(1<<LCD_RS); //Státusz infó
  ce:	e2 e6       	ldi	r30, 0x62	; 98
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	80 83       	st	Z, r24
	LCD_CMD_PORT |= (1<<LCD_RW); //olvasás
  d8:	80 81       	ld	r24, Z
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	80 83       	st	Z, r24
	
	do{
		busy = 0;
		LCD_CMD_PORT |= (1<<LCD_EN); //EN<-1
  de:	e2 e6       	ldi	r30, 0x62	; 98
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_busy+0x22>
  ee:	00 00       	nop
		_delay_us(1); //felfutó
		busy=(LCD_DATA_PIN&(1<<PE7)); //átadjuk a BF értékét
  f0:	81 b1       	in	r24, 0x01	; 1
  f2:	80 78       	andi	r24, 0x80	; 128
		LCD_CMD_PORT &= ~(1<<LCD_EN); //EN<-0
  f4:	90 81       	ld	r25, Z
  f6:	97 7f       	andi	r25, 0xF7	; 247
  f8:	90 83       	st	Z, r25
  fa:	95 e0       	ldi	r25, 0x05	; 5
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_busy+0x34>
 100:	00 00       	nop
		_delay_us(1);
		LCD_CMD_PORT |= (1<<LCD_EN); //EN<-1
 102:	90 81       	ld	r25, Z
 104:	98 60       	ori	r25, 0x08	; 8
 106:	90 83       	st	Z, r25
 108:	95 e0       	ldi	r25, 0x05	; 5
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_busy+0x42>
 10e:	00 00       	nop
		_delay_us(1);
		LCD_CMD_PORT &= ~(1<<LCD_EN); //EN<-0
 110:	90 81       	ld	r25, Z
 112:	97 7f       	andi	r25, 0xF7	; 247
 114:	90 83       	st	Z, r25
 116:	95 e0       	ldi	r25, 0x05	; 5
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_busy+0x50>
 11c:	00 00       	nop
		_delay_us(1);
	}while(busy);
 11e:	81 11       	cpse	r24, r1
 120:	de cf       	rjmp	.-68     	; 0xde <lcd_busy+0x16>
	
	LCD_CMD_PORT &= ~(1<<LCD_RW); //R/W<-0 write
 122:	80 81       	ld	r24, Z
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	80 83       	st	Z, r24
	LCD_DATA_DDR |= (1<<PE7); //PE7<-1
 128:	82 b1       	in	r24, 0x02	; 2
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	82 b9       	out	0x02, r24	; 2
 12e:	08 95       	ret

00000130 <lcd_clock>:
}


void lcd_clock()
{
	LCD_CMD_PORT |= (1<<LCD_EN); //__|
 130:	e2 e6       	ldi	r30, 0x62	; 98
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 60       	ori	r24, 0x08	; 8
 138:	80 83       	st	Z, r24
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_clock+0xc>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_clock+0x12>
	_delay_us(2); //
	LCD_CMD_PORT &= ~(1<<LCD_EN); // |__
 142:	80 81       	ld	r24, Z
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	80 83       	st	Z, r24
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_clock+0x1a>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_clock+0x20>
 150:	08 95       	ret

00000152 <lcd_cmd>:
	LCD_DATA_DDR |= (1<<PE7); //PE7<-1
}


void lcd_cmd(uint8_t cmd)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
	lcd_busy(); //Megvárjuk még felszabadul
 156:	b8 df       	rcall	.-144    	; 0xc8 <lcd_busy>
	LCD_CMD_PORT &= ~(1<<LCD_RS); //Parancs
 158:	e2 e6       	ldi	r30, 0x62	; 98
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8d 7f       	andi	r24, 0xFD	; 253
 160:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW); //Küldés
 162:	80 81       	ld	r24, Z
 164:	8b 7f       	andi	r24, 0xFB	; 251
 166:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN); //EN<-0
 168:	80 81       	ld	r24, Z
 16a:	87 7f       	andi	r24, 0xF7	; 247
 16c:	80 83       	st	Z, r24
	LCD_DATA_PORT &= ~(0xF0);
 16e:	83 b1       	in	r24, 0x03	; 3
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (cmd&0xF0); //felsõ 4 bit küldése
 174:	83 b1       	in	r24, 0x03	; 3
 176:	9c 2f       	mov	r25, r28
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	89 2b       	or	r24, r25
	lcd_clock(); //__| |__
 17c:	83 b9       	out	0x03, r24	; 3
 17e:	d8 df       	rcall	.-80     	; 0x130 <lcd_clock>
	LCD_DATA_PORT &= ~(0xF0);
 180:	83 b1       	in	r24, 0x03	; 3
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((cmd<<4)&0xF0); //alsó 4 bit küldése
 186:	23 b1       	in	r18, 0x03	; 3
 188:	30 e1       	ldi	r19, 0x10	; 16
 18a:	c3 9f       	mul	r28, r19
 18c:	c0 01       	movw	r24, r0
 18e:	11 24       	eor	r1, r1
 190:	82 2b       	or	r24, r18
	lcd_clock(); //__| |__
 192:	83 b9       	out	0x03, r24	; 3
 194:	cd df       	rcall	.-102    	; 0x130 <lcd_clock>
}
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_init>:

#include "lcd.h"

void lcd_init()
{
	DDRE |= 0xF0;
 19a:	82 b1       	in	r24, 0x02	; 2
 19c:	80 6f       	ori	r24, 0xF0	; 240
 19e:	82 b9       	out	0x02, r24	; 2
	//data7...4 out
	DDRF |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN); //RS, R/W, EN out
 1a0:	e1 e6       	ldi	r30, 0x61	; 97
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8e 60       	ori	r24, 0x0E	; 14
 1a8:	80 83       	st	Z, r24
	//írás
	PORTF &= ~(LCD_RW);
 1aa:	e2 e6       	ldi	r30, 0x62	; 98
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	80 83       	st	Z, r24
	//R/W<-0 ->write
	PORTF &= ~(1<<LCD_RS);
 1b4:	80 81       	ld	r24, Z
 1b6:	8d 7f       	andi	r24, 0xFD	; 253
 1b8:	80 83       	st	Z, r24
	//RS <-0 ->parancs
	PORTE = 0x20;
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	83 b9       	out	0x03, r24	; 3
	//0x20 parancs: Function set - Sets interface data length
	lcd_clock();
 1be:	b8 df       	rcall	.-144    	; 0x130 <lcd_clock>
	//delay
	lcd_clock();
 1c0:	b7 df       	rcall	.-146    	; 0x130 <lcd_clock>
	//__| |__
	lcd_clock();
 1c2:	b6 df       	rcall	.-148    	; 0x130 <lcd_clock>
	//4 bites üzemmód, 8x5pixel, 2soros
	//üzemmód választás
	//nem tudjuk, hogy bekapcsolás után éppen milyenben van
	lcd_cmd(0x28);
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	c5 df       	rcall	.-118    	; 0x152 <lcd_cmd>
	lcd_cmd(0x28);
 1c8:	88 e2       	ldi	r24, 0x28	; 40
 1ca:	c3 df       	rcall	.-122    	; 0x152 <lcd_cmd>
	lcd_cmd(0x28);
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	c1 df       	rcall	.-126    	; 0x152 <lcd_cmd>
	//lcd alaphelyzetbe
	lcd_cmd(0x02);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	bf df       	rcall	.-130    	; 0x152 <lcd_cmd>
	//lcd törlése
	lcd_cmd(0x01);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	bd df       	rcall	.-134    	; 0x152 <lcd_cmd>
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
	//kurzor villog, aláhúzás be, LCD be
	//LCD_command(0x08 | (1<<LCD_E) | (1<<LCD_CUR) | (1<<LCD_BL));
	//kurzor villog ki, aláhúzás be, LCD be
	//LCD_command(0x08 | (1<<LCD_E) | (1<<LCD_CUR) | (0<<LCD_BL));
	//kurzor villog ki, aláhúzás ki, LCD be
	lcd_cmd(0x08 | (1<<LCD_E) | (0<<LCD_CUR) | (0<<LCD_BL));
 1da:	bb df       	rcall	.-138    	; 0x152 <lcd_cmd>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	b9 cf       	rjmp	.-142    	; 0x152 <lcd_cmd>
	lcd_cmd(0x01);
 1e0:	08 95       	ret

000001e2 <led_out>:

uint8_t leds = 0x01;

void led_out(uint8_t led)
{
	PORTD = (led & 0xF0);
 1e2:	98 2f       	mov	r25, r24
 1e4:	90 7f       	andi	r25, 0xF0	; 240
 1e6:	92 bb       	out	0x12, r25	; 18
	PORTB = ((led << 4) & 0xF0);
 1e8:	20 e1       	ldi	r18, 0x10	; 16
 1ea:	82 9f       	mul	r24, r18
 1ec:	c0 01       	movw	r24, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret

000001f4 <__vector_16>:
}


// Timer 0 for controlling RGB LEDs with PWM
ISR(TIMER0_OVF_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	0b b6       	in	r0, 0x3b	; 59
 200:	0f 92       	push	r0
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	rgb_pwm_handling();
 21a:	28 d2       	rcall	.+1104   	; 0x66c <rgb_pwm_handling>
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0b be       	out	0x3b, r0	; 59
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_14>:


// Timer 1 mainly used for seven segment display
ISR(TIMER1_OVF_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	0b b6       	in	r0, 0x3b	; 59
 24e:	0f 92       	push	r0
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	sevenSegment_PutNumber(sevenSegmentNum);
 268:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sevenSegmentNum>
 26c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <sevenSegmentNum+0x1>
 270:	e1 d2       	rcall	.+1474   	; 0x834 <sevenSegment_PutNumber>
	//counter++;
	//if (!counter)
	//{
	//	  PORTD ^= (1 << PB7); // flips the state of PD6
	//}
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0b be       	out	0x3b, r0	; 59
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <init>:
{
	// 1 - output
	// 0 - input

	// LEDS
	DDRB &= 0x0F;	// led mask	-> 00001111 (0 - 3)
 298:	87 b3       	in	r24, 0x17	; 23
 29a:	8f 70       	andi	r24, 0x0F	; 15
 29c:	87 bb       	out	0x17, r24	; 23
	DDRB |= 0xF0;	// led		-> 11110000 (0 - 3)
 29e:	87 b3       	in	r24, 0x17	; 23
 2a0:	80 6f       	ori	r24, 0xF0	; 240
 2a2:	87 bb       	out	0x17, r24	; 23
	DDRD &= 0x0F;	// led mask	-> 00001111 (0 - 3)
 2a4:	81 b3       	in	r24, 0x11	; 17
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	81 bb       	out	0x11, r24	; 17
	DDRD |= 0xF0;	// led		-> 11110000 (4 - 7)
 2aa:	81 b3       	in	r24, 0x11	; 17
 2ac:	80 6f       	ori	r24, 0xF0	; 240
 2ae:	81 bb       	out	0x11, r24	; 17

	// PUSHBUTTONS
	DDRG &= 0xE0;	// Pushbuttons mask	-> 11100000	(K0 - K4)
 2b0:	e4 e6       	ldi	r30, 0x64	; 100
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	80 7e       	andi	r24, 0xE0	; 224
 2b8:	80 83       	st	Z, r24
	DDRG |= 0x00;	// Pushbuttons		-> 00000000 (K0 - K4)
 2ba:	80 81       	ld	r24, Z
 2bc:	80 83       	st	Z, r24
	
	// RGB LEDS
	DDRE &= 0xF3;	// RGB mask	-> 11110011 (Blue & Green)
 2be:	82 b1       	in	r24, 0x02	; 2
 2c0:	83 7f       	andi	r24, 0xF3	; 243
 2c2:	82 b9       	out	0x02, r24	; 2
	DDRE |= 0x0C;	// RGB led	-> 00001100 (Blue & Green)
 2c4:	82 b1       	in	r24, 0x02	; 2
 2c6:	8c 60       	ori	r24, 0x0C	; 12
 2c8:	82 b9       	out	0x02, r24	; 2
	DDRC &= 0x7F;	// RGB mask	-> 01111111 (Red)
 2ca:	84 b3       	in	r24, 0x14	; 20
 2cc:	8f 77       	andi	r24, 0x7F	; 127
 2ce:	84 bb       	out	0x14, r24	; 20
	DDRC |= 80;		// RGB led	-> 10000000 (Red)
 2d0:	84 b3       	in	r24, 0x14	; 20
 2d2:	80 65       	ori	r24, 0x50	; 80
 2d4:	84 bb       	out	0x14, r24	; 20
	
	// 7 SEGMENT DISPLAY
	DDRA = 0xFF;	// 7 Segment display
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	8a bb       	out	0x1a, r24	; 26
	
	// MATRIX KEYBOARD
	DDRC &= 0x80;	// Matrix mask	->	10000000
 2da:	84 b3       	in	r24, 0x14	; 20
 2dc:	80 78       	andi	r24, 0x80	; 128
 2de:	84 bb       	out	0x14, r24	; 20
	DDRC |= 0x78;	// Matrix		->	01111000
 2e0:	84 b3       	in	r24, 0x14	; 20
 2e2:	88 67       	ori	r24, 0x78	; 120
 2e4:	84 bb       	out	0x14, r24	; 20
	
	
	// TIMER 0 INIT
	TCCR0 = 0 << CS02 | 0 << CS01 | 1 << CS00;
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	93 bf       	out	0x33, r25	; 51
	TIMSK |= 1 << TOIE0;			// OverFlow enable
 2ea:	87 b7       	in	r24, 0x37	; 55
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	87 bf       	out	0x37, r24	; 55
	sei();							// Set Enable Interrupt
 2f0:	78 94       	sei
	
	// TIMER 1 INIT
	TCCR1B = 0 << CS12 | 0 << CS11 | 1 << CS10;
 2f2:	9e bd       	out	0x2e, r25	; 46
	TIMSK |= 1 << TOIE1;			// OverFlow enable
 2f4:	87 b7       	in	r24, 0x37	; 55
 2f6:	84 60       	ori	r24, 0x04	; 4
 2f8:	87 bf       	out	0x37, r24	; 55
	sei();							// Set Enable Interrupt
 2fa:	78 94       	sei
 2fc:	08 95       	ret

000002fe <game>:



// Game function
void game()
{
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	2f 97       	sbiw	r28, 0x0f	; 15
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
	struct playerState player[numberOfPlayers];

	while(gameplay)
 316:	1b c1       	rjmp	.+566    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
	{
		// Checking if the current player has lost in the previous round
		if (tmpNextPlayerHasLost)
 318:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 31c:	88 23       	and	r24, r24
 31e:	a1 f0       	breq	.+40     	; 0x348 <game+0x4a>
		{
			tmpNextPlayerHasLost = 0;					// reseting the temp variable for further use
 320:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			player[currentPlayer].playerHealth--;		// taking away one health point
 324:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <currentPlayer>
 328:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <currentPlayer+0x1>
 32c:	cf 01       	movw	r24, r30
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	e8 0f       	add	r30, r24
 334:	f9 1f       	adc	r31, r25
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	8c 0f       	add	r24, r28
 33c:	9d 1f       	adc	r25, r29
 33e:	e8 0f       	add	r30, r24
 340:	f9 1f       	adc	r31, r25
 342:	81 81       	ldd	r24, Z+1	; 0x01
 344:	81 50       	subi	r24, 0x01	; 1
 346:	81 83       	std	Z+1, r24	; 0x01
		}

		rgb_gameLights(player[currentPlayer].playerHealth);					// Showing the current health of the player with RGB LEDs
 348:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <currentPlayer>
 34c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <currentPlayer+0x1>
 350:	fc 01       	movw	r30, r24
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	8e 0f       	add	r24, r30
 358:	9f 1f       	adc	r25, r31
 35a:	e1 e0       	ldi	r30, 0x01	; 1
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	ec 0f       	add	r30, r28
 360:	fd 1f       	adc	r31, r29
 362:	e8 0f       	add	r30, r24
 364:	f9 1f       	adc	r31, r25
 366:	81 81       	ldd	r24, Z+1	; 0x01
 368:	d8 d1       	rcall	.+944    	; 0x71a <rgb_gameLights>

		// ------------------------------ STAGE 1 ------------------------------
		// Getting a dice number for the current player by pressing the 0. button
		if(PING & (1<<PG0) && (tmpDiceButtonState != 1))
 36a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 36e:	80 ff       	sbrs	r24, 0
 370:	42 c0       	rjmp	.+132    	; 0x3f6 <game+0xf8>
 372:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <tmpDiceButtonState>
 376:	81 30       	cpi	r24, 0x01	; 1
 378:	09 f4       	brne	.+2      	; 0x37c <game+0x7e>
 37a:	3d c0       	rjmp	.+122    	; 0x3f6 <game+0xf8>
		{
			tmpDiceButtonState = 1;											// the current player has pressed the button once
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <tmpDiceButtonState>
			player[currentPlayer].playerRandomDiceNum = rnd_miaDice(tmpPreviousDice);
 382:	00 91 0d 01 	lds	r16, 0x010D	; 0x80010d <currentPlayer>
 386:	10 91 0e 01 	lds	r17, 0x010E	; 0x80010e <currentPlayer+0x1>
 38a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tmpPreviousDice>
 38e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <tmpPreviousDice+0x1>
 392:	fe d1       	rcall	.+1020   	; 0x790 <rnd_miaDice>
 394:	f8 01       	movw	r30, r16
 396:	ee 0f       	add	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	0e 0f       	add	r16, r30
 39c:	1f 1f       	adc	r17, r31
 39e:	e1 e0       	ldi	r30, 0x01	; 1
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	ec 0f       	add	r30, r28
 3a4:	fd 1f       	adc	r31, r29
 3a6:	e0 0f       	add	r30, r16
 3a8:	f1 1f       	adc	r31, r17
 3aa:	82 83       	std	Z+2, r24	; 0x02
			tmpPreviousDice = player[currentPlayer].playerRandomDiceNum;	// setting the "previous" dice number for the next round
 3ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <currentPlayer>
 3b0:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <currentPlayer+0x1>
 3b4:	fc 01       	movw	r30, r24
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	8e 0f       	add	r24, r30
 3bc:	9f 1f       	adc	r25, r31
 3be:	e1 e0       	ldi	r30, 0x01	; 1
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	ec 0f       	add	r30, r28
 3c4:	fd 1f       	adc	r31, r29
 3c6:	e8 0f       	add	r30, r24
 3c8:	f9 1f       	adc	r31, r25
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <tmpPreviousDice+0x1>
 3d2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tmpPreviousDice>
			sevenSegmentNum = player[currentPlayer].playerRandomDiceNum;	// outputting the number to the seven segment display
 3d6:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <sevenSegmentNum+0x1>
 3da:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sevenSegmentNum>
			stage = 1;
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <stage+0x1>
 3e6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <stage>
			if (gameDebug)	{	led_out(stage);	}								// OOOOOOOx
 3ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameDebug>
 3ee:	88 23       	and	r24, r24
 3f0:	11 f0       	breq	.+4      	; 0x3f6 <game+0xf8>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	f6 de       	rcall	.-532    	; 0x1e2 <led_out>
		}
		
		// ------------------------------ STAGE 2 ------------------------------
		// if the current player lost: When the other players thinking the current player is lying
		if(PING & (1<<PG1) && (tmpHealthButtonState != 1) && (stage == 1))
 3f6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 3fa:	81 ff       	sbrs	r24, 1
 3fc:	19 c0       	rjmp	.+50     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 3fe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmpHealthButtonState>
 402:	81 30       	cpi	r24, 0x01	; 1
 404:	a9 f0       	breq	.+42     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 406:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stage>
 40a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <stage+0x1>
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	79 f4       	brne	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		{
			tmpHealthButtonState = 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmpHealthButtonState>
			stage = 2;
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <stage+0x1>
 420:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <stage>
			if (gameDebug)	{	led_out(stage | 0x20);	}						// OOxOOOxO
 424:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameDebug>
 428:	88 23       	and	r24, r24
 42a:	11 f0       	breq	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	82 e2       	ldi	r24, 0x22	; 34
 42e:	d9 de       	rcall	.-590    	; 0x1e2 <led_out>
		}
		// if the current player lost: When the other players thinking the current player is lying
		if(PING & (1<<PG2) && (tmpHealthButtonState != 1) && (stage == 1))
 430:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 434:	82 ff       	sbrs	r24, 2
 436:	2b c0       	rjmp	.+86     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 438:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmpHealthButtonState>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	39 f1       	breq	.+78     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 440:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stage>
 444:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <stage+0x1>
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	09 f5       	brne	.+66     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		{
			tmpHealthButtonState = 1;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmpHealthButtonState>
			player[currentPlayer].playerHealth--;
 452:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <currentPlayer>
 456:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <currentPlayer+0x1>
 45a:	cf 01       	movw	r24, r30
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	e8 0f       	add	r30, r24
 462:	f9 1f       	adc	r31, r25
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	8c 0f       	add	r24, r28
 46a:	9d 1f       	adc	r25, r29
 46c:	e8 0f       	add	r30, r24
 46e:	f9 1f       	adc	r31, r25
 470:	81 81       	ldd	r24, Z+1	; 0x01
 472:	81 50       	subi	r24, 0x01	; 1
 474:	81 83       	std	Z+1, r24	; 0x01
			stage = 2;
 476:	82 e0       	ldi	r24, 0x02	; 2
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <stage+0x1>
 47e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <stage>
			if (gameDebug)	{	led_out(stage | 0x80);	}						// OxOOOOxO
 482:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameDebug>
 486:	88 23       	and	r24, r24
 488:	11 f0       	breq	.+4      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48a:	82 e8       	ldi	r24, 0x82	; 130
 48c:	aa de       	rcall	.-684    	; 0x1e2 <led_out>
		}
		// if the current player won: Then when the next player is the current he has one less health
		if(PING & (1<<PG3) && (tmpHealthButtonState != 1) && (stage == 1))
 48e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 492:	83 ff       	sbrs	r24, 3
 494:	1b c0       	rjmp	.+54     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 496:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmpHealthButtonState>
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	b9 f0       	breq	.+46     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 49e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stage>
 4a2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <stage+0x1>
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	89 f4       	brne	.+34     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		{
			tmpHealthButtonState = 1;
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmpHealthButtonState>
			tmpNextPlayerHasLost = 1;
 4b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
			stage = 2;
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <stage+0x1>
 4bc:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <stage>
			if (gameDebug)	{	led_out(stage | 0x40);	}						// xOOOOOxO
 4c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameDebug>
 4c4:	88 23       	and	r24, r24
 4c6:	11 f0       	breq	.+4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4c8:	82 e4       	ldi	r24, 0x42	; 66
 4ca:	8b de       	rcall	.-746    	; 0x1e2 <led_out>
		}
		
		// ------------------------------ STAGE 3 ------------------------------
		// this is only activates when the dice has been rolled and when the current player has pressed the corresponding button for health
		if (stage == 2)
 4cc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <stage>
 4d0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <stage+0x1>
 4d4:	02 97       	sbiw	r24, 0x02	; 2
 4d6:	31 f5       	brne	.+76     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		{
			actRound++;									// next round
 4d8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <actRound>
 4dc:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <actRound+0x1>
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <actRound+0x1>
 4e6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <actRound>
			currentPlayer++;							// next player
 4ea:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <currentPlayer>
 4ee:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <currentPlayer+0x1>
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <currentPlayer+0x1>
 4f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <currentPlayer>

			if (currentPlayer > numberOfPlayers - 1)	// check if the dice has come around
 4fc:	05 97       	sbiw	r24, 0x05	; 5
 4fe:	24 f0       	brlt	.+8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			{
				currentPlayer = 0;
 500:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <currentPlayer+0x1>
 504:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <currentPlayer>
			}

			// reseting stage and all temp variables for the next round
			tmpDiceButtonState = 0;
 508:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tmpDiceButtonState>
			tmpHealthButtonState = 0;
 50c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tmpHealthButtonState>
			tmpNextPlayerHasLost = 0;
 510:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
			tmpPreviousDice = 0;
 514:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tmpPreviousDice+0x1>
 518:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tmpPreviousDice>
			stage = 0;
 51c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <stage+0x1>
 520:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <stage>
		}

		if(PING & (1<<PG4) && (tmpHealthButtonState != 1))
 524:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
 528:	84 ff       	sbrs	r24, 4
 52a:	11 c0       	rjmp	.+34     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 52c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tmpHealthButtonState>
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	69 f0       	breq	.+26     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
		{
			tmpHealthButtonState = 1;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tmpHealthButtonState>
			if (gameDebug)	{	led_out(0xFF);	}								// xxxxxxxx
 53a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameDebug>
 53e:	88 23       	and	r24, r24
 540:	11 f0       	breq	.+4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 542:	8f ef       	ldi	r24, 0xFF	; 255
 544:	4e de       	rcall	.-868    	; 0x1e2 <led_out>
			gameplay = 0;
 546:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <gameplay+0x1>
 54a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <gameplay>
// Game function
void game()
{
	struct playerState player[numberOfPlayers];

	while(gameplay)
 54e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <gameplay>
 552:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <gameplay+0x1>
 556:	89 2b       	or	r24, r25
 558:	09 f0       	breq	.+2      	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
			tmpHealthButtonState = 1;
			if (gameDebug)	{	led_out(0xFF);	}								// xxxxxxxx
			gameplay = 0;
		}
	}
	if (gameDebug)	{	led_out(0x00);	}										// OOOOOOOO
 55a:	de ce       	rjmp	.-580    	; 0x318 <game+0x1a>
 55c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <gameDebug>
 560:	88 23       	and	r24, r24
 562:	11 f0       	breq	.+4      	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	3d de       	rcall	.-902    	; 0x1e2 <led_out>
	sevenSegmentNum = 0;
 568:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <sevenSegmentNum+0x1>
 56c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <sevenSegmentNum>
	gameplay = 1;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <gameplay+0x1>
 578:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <gameplay>
	actRound = 0;
 57c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <actRound+0x1>
 580:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <actRound>
	stage = 0;
 584:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <stage+0x1>
 588:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <stage>
	currentPlayer = 0;
 58c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <currentPlayer+0x1>
 590:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <currentPlayer>
	tmpPreviousDice = 0;
 594:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <tmpPreviousDice+0x1>
 598:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tmpPreviousDice>
	tmpDiceButtonState = 0;
 59c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <tmpDiceButtonState>
	tmpHealthButtonState = 0;
 5a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tmpHealthButtonState>
	tmpNextPlayerHasLost = 0;
 5a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__data_end>
 5a8:	2f 96       	adiw	r28, 0x0f	; 15
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <main>:



int main(void)
{
	init();
 5be:	6c de       	rcall	.-808    	; 0x298 <init>
	lcd_init();
 5c0:	ec dd       	rcall	.-1064   	; 0x19a <lcd_init>
	
	while (1)
	{
		game();
 5c2:	9d de       	rcall	.-710    	; 0x2fe <game>
 5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <main+0x4>

000005c6 <rgb_Show>:
 5c6:	cf 92       	push	r12
// enable bit for PWM.		1 - enabled
uint8_t rgb_enable = 1;


void rgb_Show(uint8_t r, uint8_t g, uint8_t b, uint8_t brightness)
{
 5c8:	df 92       	push	r13
 5ca:	ef 92       	push	r14
 5cc:	ff 92       	push	r15
 5ce:	1f 93       	push	r17
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
	float x = 0;

	if(brightness != 0)
 5d4:	22 23       	and	r18, r18
 5d6:	09 f4       	brne	.+2      	; 0x5da <rgb_Show+0x14>
 5d8:	41 c0       	rjmp	.+130    	; 0x65c <rgb_Show+0x96>
 5da:	d4 2f       	mov	r29, r20
 5dc:	16 2f       	mov	r17, r22
 5de:	c8 2f       	mov	r28, r24
	{
		x = (255 / (float)brightness);
 5e0:	62 2f       	mov	r22, r18
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	c8 d1       	rcall	.+912    	; 0x97a <__floatunsisf>
 5ea:	9b 01       	movw	r18, r22
 5ec:	ac 01       	movw	r20, r24
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	8f e7       	ldi	r24, 0x7F	; 127
 5f4:	93 e4       	ldi	r25, 0x43	; 67
 5f6:	59 d1       	rcall	.+690    	; 0x8aa <__divsf3>
 5f8:	6b 01       	movw	r12, r22
 5fa:	7c 01       	movw	r14, r24
		pwm_red = (float)r / x;
 5fc:	6c 2f       	mov	r22, r28
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	ba d1       	rcall	.+884    	; 0x97a <__floatunsisf>
 606:	a7 01       	movw	r20, r14
 608:	96 01       	movw	r18, r12
 60a:	4f d1       	rcall	.+670    	; 0x8aa <__divsf3>
 60c:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <pwm_red>
 610:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <pwm_red+0x1>
 614:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pwm_red+0x2>
 618:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <pwm_red+0x3>
		pwm_green = (float)g / x;
 61c:	61 2f       	mov	r22, r17
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	aa d1       	rcall	.+852    	; 0x97a <__floatunsisf>
 626:	a7 01       	movw	r20, r14
 628:	96 01       	movw	r18, r12
 62a:	3f d1       	rcall	.+638    	; 0x8aa <__divsf3>
 62c:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <pwm_green>
 630:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <pwm_green+0x1>
 634:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <pwm_green+0x2>
 638:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <pwm_green+0x3>
		pwm_blue = (float)b / x;
 63c:	6d 2f       	mov	r22, r29
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	9a d1       	rcall	.+820    	; 0x97a <__floatunsisf>
 646:	a7 01       	movw	r20, r14
 648:	96 01       	movw	r18, r12
 64a:	2f d1       	rcall	.+606    	; 0x8aa <__divsf3>
 64c:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <pwm_blue>
 650:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <pwm_blue+0x1>
 654:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pwm_blue+0x2>
 658:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <pwm_blue+0x3>
 65c:	df 91       	pop	r29
	}

}
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	ff 90       	pop	r15
 664:	ef 90       	pop	r14
 666:	df 90       	pop	r13
 668:	cf 90       	pop	r12
 66a:	08 95       	ret

0000066c <rgb_pwm_handling>:
 66c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <rgb_enable>


void rgb_pwm_handling()
{
	if (rgb_enable)
 670:	88 23       	and	r24, r24
 672:	09 f4       	brne	.+2      	; 0x676 <rgb_pwm_handling+0xa>
 674:	51 c0       	rjmp	.+162    	; 0x718 <rgb_pwm_handling+0xac>
	{
		pwm_counter++;
 676:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pwm_counter>
 67a:	8f 5f       	subi	r24, 0xFF	; 255
 67c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <pwm_counter>
		if (pwm_counter == 255)		{	pwm_counter = 0;	}
 680:	8f 3f       	cpi	r24, 0xFF	; 255
 682:	11 f4       	brne	.+4      	; 0x688 <rgb_pwm_handling+0x1c>
 684:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <pwm_counter>
		
		
		// Switching the RED led with PWM
		if (pwm_red >= pwm_counter)
 688:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <pwm_counter>
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	75 d1       	rcall	.+746    	; 0x97e <__floatsisf>
 694:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <pwm_red>
 698:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <pwm_red+0x1>
 69c:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <pwm_red+0x2>
 6a0:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <pwm_red+0x3>
 6a4:	fe d0       	rcall	.+508    	; 0x8a2 <__cmpsf2>
 6a6:	18 16       	cp	r1, r24
 6a8:	24 f0       	brlt	.+8      	; 0x6b2 <rgb_pwm_handling+0x46>
		{			
			PORTC |= (1<<PC7);
 6aa:	85 b3       	in	r24, 0x15	; 21
 6ac:	80 68       	ori	r24, 0x80	; 128
 6ae:	85 bb       	out	0x15, r24	; 21
 6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <rgb_pwm_handling+0x4c>
		}
		else
		{
			PORTC &= ~(1<<PC7);
 6b2:	85 b3       	in	r24, 0x15	; 21
 6b4:	8f 77       	andi	r24, 0x7F	; 127
 6b6:	85 bb       	out	0x15, r24	; 21
		}
		
		// Switching the GREEN led with PWM
		if (pwm_green >= pwm_counter)
 6b8:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <pwm_counter>
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	5d d1       	rcall	.+698    	; 0x97e <__floatsisf>
 6c4:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <pwm_green>
 6c8:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <pwm_green+0x1>
 6cc:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <pwm_green+0x2>
 6d0:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <pwm_green+0x3>
 6d4:	e6 d0       	rcall	.+460    	; 0x8a2 <__cmpsf2>
 6d6:	18 16       	cp	r1, r24
 6d8:	24 f0       	brlt	.+8      	; 0x6e2 <rgb_pwm_handling+0x76>
		{
			PORTE |= (1<<PE2);
 6da:	83 b1       	in	r24, 0x03	; 3
 6dc:	84 60       	ori	r24, 0x04	; 4
 6de:	83 b9       	out	0x03, r24	; 3
 6e0:	03 c0       	rjmp	.+6      	; 0x6e8 <rgb_pwm_handling+0x7c>
		}
		else
		{
			PORTE &=~ (1<<PE2);
 6e2:	83 b1       	in	r24, 0x03	; 3
 6e4:	8b 7f       	andi	r24, 0xFB	; 251
 6e6:	83 b9       	out	0x03, r24	; 3
		}
		
		// Switching the BLUE led with PWM
		if (pwm_blue >= pwm_counter)
 6e8:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <pwm_counter>
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	80 e0       	ldi	r24, 0x00	; 0
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	45 d1       	rcall	.+650    	; 0x97e <__floatsisf>
 6f4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <pwm_blue>
 6f8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <pwm_blue+0x1>
 6fc:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <pwm_blue+0x2>
 700:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <pwm_blue+0x3>
 704:	ce d0       	rcall	.+412    	; 0x8a2 <__cmpsf2>
 706:	18 16       	cp	r1, r24
 708:	24 f0       	brlt	.+8      	; 0x712 <rgb_pwm_handling+0xa6>
		{
			PORTE |= (1<<PE3);
 70a:	83 b1       	in	r24, 0x03	; 3
 70c:	88 60       	ori	r24, 0x08	; 8
 70e:	83 b9       	out	0x03, r24	; 3
 710:	08 95       	ret
		}
		else
		{
			PORTE &=~ (1<<PE3);
 712:	83 b1       	in	r24, 0x03	; 3
 714:	87 7f       	andi	r24, 0xF7	; 247
 716:	83 b9       	out	0x03, r24	; 3
 718:	08 95       	ret

0000071a <rgb_gameLights>:
}


void rgb_gameLights(uint8_t health)
{
	switch(health)
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	d1 f0       	breq	.+52     	; 0x752 <rgb_gameLights+0x38>
 71e:	28 f4       	brcc	.+10     	; 0x72a <rgb_gameLights+0x10>
 720:	88 23       	and	r24, r24
 722:	09 f1       	breq	.+66     	; 0x766 <rgb_gameLights+0x4c>
 724:	81 30       	cpi	r24, 0x01	; 1
 726:	d1 f0       	breq	.+52     	; 0x75c <rgb_gameLights+0x42>
 728:	23 c0       	rjmp	.+70     	; 0x770 <rgb_gameLights+0x56>
 72a:	84 30       	cpi	r24, 0x04	; 4
 72c:	41 f0       	breq	.+16     	; 0x73e <rgb_gameLights+0x24>
 72e:	60 f0       	brcs	.+24     	; 0x748 <rgb_gameLights+0x2e>
 730:	85 30       	cpi	r24, 0x05	; 5
 732:	f1 f4       	brne	.+60     	; 0x770 <rgb_gameLights+0x56>
	{
		case 5:		rgb_Show(0, 255, 0, 255);
 734:	2f ef       	ldi	r18, 0xFF	; 255
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	6f ef       	ldi	r22, 0xFF	; 255
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	44 df       	rcall	.-376    	; 0x5c6 <rgb_Show>
		case 4:		rgb_Show(20, 255, 0, 255);
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	40 e0       	ldi	r20, 0x00	; 0
 742:	6f ef       	ldi	r22, 0xFF	; 255
 744:	84 e1       	ldi	r24, 0x14	; 20
 746:	3f df       	rcall	.-386    	; 0x5c6 <rgb_Show>
		case 3:		rgb_Show(50, 150, 0, 255);
 748:	2f ef       	ldi	r18, 0xFF	; 255
 74a:	40 e0       	ldi	r20, 0x00	; 0
 74c:	66 e9       	ldi	r22, 0x96	; 150
 74e:	82 e3       	ldi	r24, 0x32	; 50
 750:	3a df       	rcall	.-396    	; 0x5c6 <rgb_Show>
		case 2:		rgb_Show(150, 50, 0, 255);
 752:	2f ef       	ldi	r18, 0xFF	; 255
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	62 e3       	ldi	r22, 0x32	; 50
 758:	86 e9       	ldi	r24, 0x96	; 150
 75a:	35 df       	rcall	.-406    	; 0x5c6 <rgb_Show>
		case 1:		rgb_Show(255, 0, 0, 255);
 75c:	2f ef       	ldi	r18, 0xFF	; 255
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	8f ef       	ldi	r24, 0xFF	; 255
 764:	30 df       	rcall	.-416    	; 0x5c6 <rgb_Show>
		case 0:		rgb_Show(0, 0, 0, 0);
 766:	20 e0       	ldi	r18, 0x00	; 0
 768:	40 e0       	ldi	r20, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	2b df       	rcall	.-426    	; 0x5c6 <rgb_Show>
		default:	rgb_Show(0, 0, 0, 0);
 770:	20 e0       	ldi	r18, 0x00	; 0
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	60 e0       	ldi	r22, 0x00	; 0
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	26 cf       	rjmp	.-436    	; 0x5c6 <rgb_Show>
 77a:	08 95       	ret

0000077c <rnd_dice>:
// This function generates a random dice number (1 - 6)
int rnd_dice()
{
	int dice = 0;
	
	number = rand();
 77c:	1e d2       	rcall	.+1084   	; 0xbba <rand>
 77e:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <number+0x1>
 782:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <number>
	dice = (number % rndMax) + 1;
 786:	66 e0       	ldi	r22, 0x06	; 6
 788:	70 e0       	ldi	r23, 0x00	; 0
 78a:	a9 d1       	rcall	.+850    	; 0xade <__divmodhi4>

	return dice;
}
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	08 95       	ret

00000790 <rnd_miaDice>:
uint8_t rnd = rndMin;
int number = 0;

// This function generates a random Mia number that is used for the game, ranges between 21 and 66
int rnd_miaDice(int previousDice)
{
 790:	ff 92       	push	r15
 792:	0f 93       	push	r16
 794:	1f 93       	push	r17
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	ec 01       	movw	r28, r24
	int dice = 0;
	int num1 = 0;
	int num2 = 0;
	uint8_t untilItsGood = 1;
	uint8_t bas = 0;
 79c:	f1 2c       	mov	r15, r1
	
	while (untilItsGood)
 79e:	31 c0       	rjmp	.+98     	; 0x802 <rnd_miaDice+0x72>
		num1 = rnd_dice();
		num2 = rnd_dice();
		
		if (num1 > num2)
		{
			dice = (num1 * 10) + num2;
 7a0:	a8 01       	movw	r20, r16
 7a2:	44 0f       	add	r20, r20
 7a4:	55 1f       	adc	r21, r21
 7a6:	98 01       	movw	r18, r16
 7a8:	22 0f       	add	r18, r18
 7aa:	33 1f       	adc	r19, r19
 7ac:	22 0f       	add	r18, r18
 7ae:	33 1f       	adc	r19, r19
 7b0:	22 0f       	add	r18, r18
 7b2:	33 1f       	adc	r19, r19
 7b4:	24 0f       	add	r18, r20
 7b6:	35 1f       	adc	r19, r21
 7b8:	82 0f       	add	r24, r18
 7ba:	93 1f       	adc	r25, r19
 7bc:	19 c0       	rjmp	.+50     	; 0x7f0 <rnd_miaDice+0x60>
		}
		else if (num1 < num2)
 7be:	08 17       	cp	r16, r24
 7c0:	19 07       	cpc	r17, r25
 7c2:	74 f4       	brge	.+28     	; 0x7e0 <rnd_miaDice+0x50>
		{
			dice = (num2 * 10) + num1;
 7c4:	9c 01       	movw	r18, r24
 7c6:	22 0f       	add	r18, r18
 7c8:	33 1f       	adc	r19, r19
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	82 0f       	add	r24, r18
 7d8:	93 1f       	adc	r25, r19
 7da:	80 0f       	add	r24, r16
 7dc:	91 1f       	adc	r25, r17
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <rnd_miaDice+0x60>
		}
		else
		{
			dice = (num1 * 10) + num1;
 7e0:	2b e0       	ldi	r18, 0x0B	; 11
 7e2:	20 9f       	mul	r18, r16
 7e4:	c0 01       	movw	r24, r0
 7e6:	21 9f       	mul	r18, r17
 7e8:	90 0d       	add	r25, r0
 7ea:	11 24       	eor	r1, r1
			bas = 1;
 7ec:	ff 24       	eor	r15, r15
 7ee:	f3 94       	inc	r15
		}

		if (dice == 21)
 7f0:	85 31       	cpi	r24, 0x15	; 21
 7f2:	91 05       	cpc	r25, r1
 7f4:	69 f0       	breq	.+26     	; 0x810 <rnd_miaDice+0x80>
		{
			untilItsGood = 0;
			break;
		}
		if (bas == 1)
 7f6:	21 e0       	ldi	r18, 0x01	; 1
 7f8:	f2 16       	cp	r15, r18
 7fa:	51 f0       	breq	.+20     	; 0x810 <rnd_miaDice+0x80>
		{
			untilItsGood = 0;
			bas = 0;
			break;
		}
		if (dice >= previousDice)
 7fc:	8c 17       	cp	r24, r28
 7fe:	9d 07       	cpc	r25, r29
 800:	3c f4       	brge	.+14     	; 0x810 <rnd_miaDice+0x80>
	uint8_t untilItsGood = 1;
	uint8_t bas = 0;
	
	while (untilItsGood)
	{
		num1 = rnd_dice();
 802:	bc df       	rcall	.-136    	; 0x77c <rnd_dice>
 804:	8c 01       	movw	r16, r24
		num2 = rnd_dice();
 806:	ba df       	rcall	.-140    	; 0x77c <rnd_dice>
 808:	80 17       	cp	r24, r16
		
		if (num1 > num2)
 80a:	91 07       	cpc	r25, r17
 80c:	4c f2       	brlt	.-110    	; 0x7a0 <rnd_miaDice+0x10>
 80e:	d7 cf       	rjmp	.-82     	; 0x7be <rnd_miaDice+0x2e>
 810:	df 91       	pop	r29
			untilItsGood = 0;
			break;
		}
	}
	return dice;
}
 812:	cf 91       	pop	r28
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	ff 90       	pop	r15
 81a:	08 95       	ret

0000081c <sevenSegment_PutDigit>:
uint8_t digit[4] = {0};
int j = 0;

void sevenSegment_PutDigit(uint8_t digit, uint8_t num)
{
	if (digit > 3)
 81c:	84 30       	cpi	r24, 0x04	; 4
 81e:	48 f4       	brcc	.+18     	; 0x832 <sevenSegment_PutDigit+0x16>
	return;
	if (num > 9)
 820:	6a 30       	cpi	r22, 0x0A	; 10
 822:	38 f4       	brcc	.+14     	; 0x832 <sevenSegment_PutDigit+0x16>
	return;

	PORTA = 0x80 | (digit) << 4 | num;
 824:	20 e1       	ldi	r18, 0x10	; 16
 826:	82 9f       	mul	r24, r18
 828:	c0 01       	movw	r24, r0
 82a:	11 24       	eor	r1, r1
 82c:	86 2b       	or	r24, r22
 82e:	80 68       	ori	r24, 0x80	; 128
 830:	8b bb       	out	0x1b, r24	; 27
 832:	08 95       	ret

00000834 <sevenSegment_PutNumber>:
}
void sevenSegment_PutNumber(int num)
{
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	ec 01       	movw	r28, r24
	digit[0] = num % 10;
 83a:	2a e0       	ldi	r18, 0x0A	; 10
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	b9 01       	movw	r22, r18
 840:	4e d1       	rcall	.+668    	; 0xade <__divmodhi4>
 842:	e6 e2       	ldi	r30, 0x26	; 38
 844:	f1 e0       	ldi	r31, 0x01	; 1
 846:	80 83       	st	Z, r24
	digit[1] = (num / 10) % 10;
 848:	cb 01       	movw	r24, r22
 84a:	b9 01       	movw	r22, r18
 84c:	48 d1       	rcall	.+656    	; 0xade <__divmodhi4>
 84e:	81 83       	std	Z+1, r24	; 0x01
	digit[2] = (num / 100) % 10;
 850:	ce 01       	movw	r24, r28
 852:	64 e6       	ldi	r22, 0x64	; 100
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	43 d1       	rcall	.+646    	; 0xade <__divmodhi4>
 858:	cb 01       	movw	r24, r22
 85a:	b9 01       	movw	r22, r18
 85c:	40 d1       	rcall	.+640    	; 0xade <__divmodhi4>
 85e:	82 83       	std	Z+2, r24	; 0x02
	digit[3] = (num / 1000) % 10;
 860:	ce 01       	movw	r24, r28
 862:	68 ee       	ldi	r22, 0xE8	; 232
 864:	73 e0       	ldi	r23, 0x03	; 3
 866:	3b d1       	rcall	.+630    	; 0xade <__divmodhi4>
 868:	cb 01       	movw	r24, r22
 86a:	b9 01       	movw	r22, r18
 86c:	38 d1       	rcall	.+624    	; 0xade <__divmodhi4>
 86e:	83 83       	std	Z+3, r24	; 0x03
 870:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <j>
	
	j = (j + 1) % 4;
 874:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <j+0x1>
 878:	01 96       	adiw	r24, 0x01	; 1
 87a:	83 70       	andi	r24, 0x03	; 3
 87c:	90 78       	andi	r25, 0x80	; 128
 87e:	99 23       	and	r25, r25
 880:	24 f4       	brge	.+8      	; 0x88a <sevenSegment_PutNumber+0x56>
 882:	01 97       	sbiw	r24, 0x01	; 1
 884:	8c 6f       	ori	r24, 0xFC	; 252
 886:	9f 6f       	ori	r25, 0xFF	; 255
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <j+0x1>
 88e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <j>
	sevenSegment_PutDigit(j, digit[j]);
 892:	fc 01       	movw	r30, r24
 894:	ea 5d       	subi	r30, 0xDA	; 218
 896:	fe 4f       	sbci	r31, 0xFE	; 254
 898:	60 81       	ld	r22, Z
 89a:	c0 df       	rcall	.-128    	; 0x81c <sevenSegment_PutDigit>
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	08 95       	ret

000008a2 <__cmpsf2>:
 8a2:	a8 d0       	rcall	.+336    	; 0x9f4 <__fp_cmp>
 8a4:	08 f4       	brcc	.+2      	; 0x8a8 <__cmpsf2+0x6>
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	08 95       	ret

000008aa <__divsf3>:
 8aa:	0c d0       	rcall	.+24     	; 0x8c4 <__divsf3x>
 8ac:	de c0       	rjmp	.+444    	; 0xa6a <__fp_round>
 8ae:	d6 d0       	rcall	.+428    	; 0xa5c <__fp_pscB>
 8b0:	40 f0       	brcs	.+16     	; 0x8c2 <__divsf3+0x18>
 8b2:	cd d0       	rcall	.+410    	; 0xa4e <__fp_pscA>
 8b4:	30 f0       	brcs	.+12     	; 0x8c2 <__divsf3+0x18>
 8b6:	21 f4       	brne	.+8      	; 0x8c0 <__divsf3+0x16>
 8b8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <__divsf3+0x18>
 8bc:	bf c0       	rjmp	.+382    	; 0xa3c <__fp_inf>
 8be:	51 11       	cpse	r21, r1
 8c0:	08 c1       	rjmp	.+528    	; 0xad2 <__fp_szero>
 8c2:	c2 c0       	rjmp	.+388    	; 0xa48 <__fp_nan>

000008c4 <__divsf3x>:
 8c4:	e3 d0       	rcall	.+454    	; 0xa8c <__fp_split3>
 8c6:	98 f3       	brcs	.-26     	; 0x8ae <__divsf3+0x4>

000008c8 <__divsf3_pse>:
 8c8:	99 23       	and	r25, r25
 8ca:	c9 f3       	breq	.-14     	; 0x8be <__divsf3+0x14>
 8cc:	55 23       	and	r21, r21
 8ce:	b1 f3       	breq	.-20     	; 0x8bc <__divsf3+0x12>
 8d0:	95 1b       	sub	r25, r21
 8d2:	55 0b       	sbc	r21, r21
 8d4:	bb 27       	eor	r27, r27
 8d6:	aa 27       	eor	r26, r26
 8d8:	62 17       	cp	r22, r18
 8da:	73 07       	cpc	r23, r19
 8dc:	84 07       	cpc	r24, r20
 8de:	38 f0       	brcs	.+14     	; 0x8ee <__divsf3_pse+0x26>
 8e0:	9f 5f       	subi	r25, 0xFF	; 255
 8e2:	5f 4f       	sbci	r21, 0xFF	; 255
 8e4:	22 0f       	add	r18, r18
 8e6:	33 1f       	adc	r19, r19
 8e8:	44 1f       	adc	r20, r20
 8ea:	aa 1f       	adc	r26, r26
 8ec:	a9 f3       	breq	.-22     	; 0x8d8 <__divsf3_pse+0x10>
 8ee:	33 d0       	rcall	.+102    	; 0x956 <__divsf3_pse+0x8e>
 8f0:	0e 2e       	mov	r0, r30
 8f2:	3a f0       	brmi	.+14     	; 0x902 <__divsf3_pse+0x3a>
 8f4:	e0 e8       	ldi	r30, 0x80	; 128
 8f6:	30 d0       	rcall	.+96     	; 0x958 <__divsf3_pse+0x90>
 8f8:	91 50       	subi	r25, 0x01	; 1
 8fa:	50 40       	sbci	r21, 0x00	; 0
 8fc:	e6 95       	lsr	r30
 8fe:	00 1c       	adc	r0, r0
 900:	ca f7       	brpl	.-14     	; 0x8f4 <__divsf3_pse+0x2c>
 902:	29 d0       	rcall	.+82     	; 0x956 <__divsf3_pse+0x8e>
 904:	fe 2f       	mov	r31, r30
 906:	27 d0       	rcall	.+78     	; 0x956 <__divsf3_pse+0x8e>
 908:	66 0f       	add	r22, r22
 90a:	77 1f       	adc	r23, r23
 90c:	88 1f       	adc	r24, r24
 90e:	bb 1f       	adc	r27, r27
 910:	26 17       	cp	r18, r22
 912:	37 07       	cpc	r19, r23
 914:	48 07       	cpc	r20, r24
 916:	ab 07       	cpc	r26, r27
 918:	b0 e8       	ldi	r27, 0x80	; 128
 91a:	09 f0       	breq	.+2      	; 0x91e <__divsf3_pse+0x56>
 91c:	bb 0b       	sbc	r27, r27
 91e:	80 2d       	mov	r24, r0
 920:	bf 01       	movw	r22, r30
 922:	ff 27       	eor	r31, r31
 924:	93 58       	subi	r25, 0x83	; 131
 926:	5f 4f       	sbci	r21, 0xFF	; 255
 928:	2a f0       	brmi	.+10     	; 0x934 <__divsf3_pse+0x6c>
 92a:	9e 3f       	cpi	r25, 0xFE	; 254
 92c:	51 05       	cpc	r21, r1
 92e:	68 f0       	brcs	.+26     	; 0x94a <__divsf3_pse+0x82>
 930:	85 c0       	rjmp	.+266    	; 0xa3c <__fp_inf>
 932:	cf c0       	rjmp	.+414    	; 0xad2 <__fp_szero>
 934:	5f 3f       	cpi	r21, 0xFF	; 255
 936:	ec f3       	brlt	.-6      	; 0x932 <__divsf3_pse+0x6a>
 938:	98 3e       	cpi	r25, 0xE8	; 232
 93a:	dc f3       	brlt	.-10     	; 0x932 <__divsf3_pse+0x6a>
 93c:	86 95       	lsr	r24
 93e:	77 95       	ror	r23
 940:	67 95       	ror	r22
 942:	b7 95       	ror	r27
 944:	f7 95       	ror	r31
 946:	9f 5f       	subi	r25, 0xFF	; 255
 948:	c9 f7       	brne	.-14     	; 0x93c <__divsf3_pse+0x74>
 94a:	88 0f       	add	r24, r24
 94c:	91 1d       	adc	r25, r1
 94e:	96 95       	lsr	r25
 950:	87 95       	ror	r24
 952:	97 f9       	bld	r25, 7
 954:	08 95       	ret
 956:	e1 e0       	ldi	r30, 0x01	; 1
 958:	66 0f       	add	r22, r22
 95a:	77 1f       	adc	r23, r23
 95c:	88 1f       	adc	r24, r24
 95e:	bb 1f       	adc	r27, r27
 960:	62 17       	cp	r22, r18
 962:	73 07       	cpc	r23, r19
 964:	84 07       	cpc	r24, r20
 966:	ba 07       	cpc	r27, r26
 968:	20 f0       	brcs	.+8      	; 0x972 <__divsf3_pse+0xaa>
 96a:	62 1b       	sub	r22, r18
 96c:	73 0b       	sbc	r23, r19
 96e:	84 0b       	sbc	r24, r20
 970:	ba 0b       	sbc	r27, r26
 972:	ee 1f       	adc	r30, r30
 974:	88 f7       	brcc	.-30     	; 0x958 <__divsf3_pse+0x90>
 976:	e0 95       	com	r30
 978:	08 95       	ret

0000097a <__floatunsisf>:
 97a:	e8 94       	clt
 97c:	09 c0       	rjmp	.+18     	; 0x990 <__floatsisf+0x12>

0000097e <__floatsisf>:
 97e:	97 fb       	bst	r25, 7
 980:	3e f4       	brtc	.+14     	; 0x990 <__floatsisf+0x12>
 982:	90 95       	com	r25
 984:	80 95       	com	r24
 986:	70 95       	com	r23
 988:	61 95       	neg	r22
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	99 23       	and	r25, r25
 992:	a9 f0       	breq	.+42     	; 0x9be <__floatsisf+0x40>
 994:	f9 2f       	mov	r31, r25
 996:	96 e9       	ldi	r25, 0x96	; 150
 998:	bb 27       	eor	r27, r27
 99a:	93 95       	inc	r25
 99c:	f6 95       	lsr	r31
 99e:	87 95       	ror	r24
 9a0:	77 95       	ror	r23
 9a2:	67 95       	ror	r22
 9a4:	b7 95       	ror	r27
 9a6:	f1 11       	cpse	r31, r1
 9a8:	f8 cf       	rjmp	.-16     	; 0x99a <__floatsisf+0x1c>
 9aa:	fa f4       	brpl	.+62     	; 0x9ea <__floatsisf+0x6c>
 9ac:	bb 0f       	add	r27, r27
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <__floatsisf+0x36>
 9b0:	60 ff       	sbrs	r22, 0
 9b2:	1b c0       	rjmp	.+54     	; 0x9ea <__floatsisf+0x6c>
 9b4:	6f 5f       	subi	r22, 0xFF	; 255
 9b6:	7f 4f       	sbci	r23, 0xFF	; 255
 9b8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	16 c0       	rjmp	.+44     	; 0x9ea <__floatsisf+0x6c>
 9be:	88 23       	and	r24, r24
 9c0:	11 f0       	breq	.+4      	; 0x9c6 <__floatsisf+0x48>
 9c2:	96 e9       	ldi	r25, 0x96	; 150
 9c4:	11 c0       	rjmp	.+34     	; 0x9e8 <__floatsisf+0x6a>
 9c6:	77 23       	and	r23, r23
 9c8:	21 f0       	breq	.+8      	; 0x9d2 <__floatsisf+0x54>
 9ca:	9e e8       	ldi	r25, 0x8E	; 142
 9cc:	87 2f       	mov	r24, r23
 9ce:	76 2f       	mov	r23, r22
 9d0:	05 c0       	rjmp	.+10     	; 0x9dc <__floatsisf+0x5e>
 9d2:	66 23       	and	r22, r22
 9d4:	71 f0       	breq	.+28     	; 0x9f2 <__floatsisf+0x74>
 9d6:	96 e8       	ldi	r25, 0x86	; 134
 9d8:	86 2f       	mov	r24, r22
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	2a f0       	brmi	.+10     	; 0x9ea <__floatsisf+0x6c>
 9e0:	9a 95       	dec	r25
 9e2:	66 0f       	add	r22, r22
 9e4:	77 1f       	adc	r23, r23
 9e6:	88 1f       	adc	r24, r24
 9e8:	da f7       	brpl	.-10     	; 0x9e0 <__floatsisf+0x62>
 9ea:	88 0f       	add	r24, r24
 9ec:	96 95       	lsr	r25
 9ee:	87 95       	ror	r24
 9f0:	97 f9       	bld	r25, 7
 9f2:	08 95       	ret

000009f4 <__fp_cmp>:
 9f4:	99 0f       	add	r25, r25
 9f6:	00 08       	sbc	r0, r0
 9f8:	55 0f       	add	r21, r21
 9fa:	aa 0b       	sbc	r26, r26
 9fc:	e0 e8       	ldi	r30, 0x80	; 128
 9fe:	fe ef       	ldi	r31, 0xFE	; 254
 a00:	16 16       	cp	r1, r22
 a02:	17 06       	cpc	r1, r23
 a04:	e8 07       	cpc	r30, r24
 a06:	f9 07       	cpc	r31, r25
 a08:	c0 f0       	brcs	.+48     	; 0xa3a <__fp_cmp+0x46>
 a0a:	12 16       	cp	r1, r18
 a0c:	13 06       	cpc	r1, r19
 a0e:	e4 07       	cpc	r30, r20
 a10:	f5 07       	cpc	r31, r21
 a12:	98 f0       	brcs	.+38     	; 0xa3a <__fp_cmp+0x46>
 a14:	62 1b       	sub	r22, r18
 a16:	73 0b       	sbc	r23, r19
 a18:	84 0b       	sbc	r24, r20
 a1a:	95 0b       	sbc	r25, r21
 a1c:	39 f4       	brne	.+14     	; 0xa2c <__fp_cmp+0x38>
 a1e:	0a 26       	eor	r0, r26
 a20:	61 f0       	breq	.+24     	; 0xa3a <__fp_cmp+0x46>
 a22:	23 2b       	or	r18, r19
 a24:	24 2b       	or	r18, r20
 a26:	25 2b       	or	r18, r21
 a28:	21 f4       	brne	.+8      	; 0xa32 <__fp_cmp+0x3e>
 a2a:	08 95       	ret
 a2c:	0a 26       	eor	r0, r26
 a2e:	09 f4       	brne	.+2      	; 0xa32 <__fp_cmp+0x3e>
 a30:	a1 40       	sbci	r26, 0x01	; 1
 a32:	a6 95       	lsr	r26
 a34:	8f ef       	ldi	r24, 0xFF	; 255
 a36:	81 1d       	adc	r24, r1
 a38:	81 1d       	adc	r24, r1
 a3a:	08 95       	ret

00000a3c <__fp_inf>:
 a3c:	97 f9       	bld	r25, 7
 a3e:	9f 67       	ori	r25, 0x7F	; 127
 a40:	80 e8       	ldi	r24, 0x80	; 128
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	60 e0       	ldi	r22, 0x00	; 0
 a46:	08 95       	ret

00000a48 <__fp_nan>:
 a48:	9f ef       	ldi	r25, 0xFF	; 255
 a4a:	80 ec       	ldi	r24, 0xC0	; 192
 a4c:	08 95       	ret

00000a4e <__fp_pscA>:
 a4e:	00 24       	eor	r0, r0
 a50:	0a 94       	dec	r0
 a52:	16 16       	cp	r1, r22
 a54:	17 06       	cpc	r1, r23
 a56:	18 06       	cpc	r1, r24
 a58:	09 06       	cpc	r0, r25
 a5a:	08 95       	ret

00000a5c <__fp_pscB>:
 a5c:	00 24       	eor	r0, r0
 a5e:	0a 94       	dec	r0
 a60:	12 16       	cp	r1, r18
 a62:	13 06       	cpc	r1, r19
 a64:	14 06       	cpc	r1, r20
 a66:	05 06       	cpc	r0, r21
 a68:	08 95       	ret

00000a6a <__fp_round>:
 a6a:	09 2e       	mov	r0, r25
 a6c:	03 94       	inc	r0
 a6e:	00 0c       	add	r0, r0
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0xc>
 a72:	88 23       	and	r24, r24
 a74:	52 f0       	brmi	.+20     	; 0xa8a <__fp_round+0x20>
 a76:	bb 0f       	add	r27, r27
 a78:	40 f4       	brcc	.+16     	; 0xa8a <__fp_round+0x20>
 a7a:	bf 2b       	or	r27, r31
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0x18>
 a7e:	60 ff       	sbrs	r22, 0
 a80:	04 c0       	rjmp	.+8      	; 0xa8a <__fp_round+0x20>
 a82:	6f 5f       	subi	r22, 0xFF	; 255
 a84:	7f 4f       	sbci	r23, 0xFF	; 255
 a86:	8f 4f       	sbci	r24, 0xFF	; 255
 a88:	9f 4f       	sbci	r25, 0xFF	; 255
 a8a:	08 95       	ret

00000a8c <__fp_split3>:
 a8c:	57 fd       	sbrc	r21, 7
 a8e:	90 58       	subi	r25, 0x80	; 128
 a90:	44 0f       	add	r20, r20
 a92:	55 1f       	adc	r21, r21
 a94:	59 f0       	breq	.+22     	; 0xaac <__fp_splitA+0x10>
 a96:	5f 3f       	cpi	r21, 0xFF	; 255
 a98:	71 f0       	breq	.+28     	; 0xab6 <__fp_splitA+0x1a>
 a9a:	47 95       	ror	r20

00000a9c <__fp_splitA>:
 a9c:	88 0f       	add	r24, r24
 a9e:	97 fb       	bst	r25, 7
 aa0:	99 1f       	adc	r25, r25
 aa2:	61 f0       	breq	.+24     	; 0xabc <__fp_splitA+0x20>
 aa4:	9f 3f       	cpi	r25, 0xFF	; 255
 aa6:	79 f0       	breq	.+30     	; 0xac6 <__fp_splitA+0x2a>
 aa8:	87 95       	ror	r24
 aaa:	08 95       	ret
 aac:	12 16       	cp	r1, r18
 aae:	13 06       	cpc	r1, r19
 ab0:	14 06       	cpc	r1, r20
 ab2:	55 1f       	adc	r21, r21
 ab4:	f2 cf       	rjmp	.-28     	; 0xa9a <__fp_split3+0xe>
 ab6:	46 95       	lsr	r20
 ab8:	f1 df       	rcall	.-30     	; 0xa9c <__fp_splitA>
 aba:	08 c0       	rjmp	.+16     	; 0xacc <__fp_splitA+0x30>
 abc:	16 16       	cp	r1, r22
 abe:	17 06       	cpc	r1, r23
 ac0:	18 06       	cpc	r1, r24
 ac2:	99 1f       	adc	r25, r25
 ac4:	f1 cf       	rjmp	.-30     	; 0xaa8 <__fp_splitA+0xc>
 ac6:	86 95       	lsr	r24
 ac8:	71 05       	cpc	r23, r1
 aca:	61 05       	cpc	r22, r1
 acc:	08 94       	sec
 ace:	08 95       	ret

00000ad0 <__fp_zero>:
 ad0:	e8 94       	clt

00000ad2 <__fp_szero>:
 ad2:	bb 27       	eor	r27, r27
 ad4:	66 27       	eor	r22, r22
 ad6:	77 27       	eor	r23, r23
 ad8:	cb 01       	movw	r24, r22
 ada:	97 f9       	bld	r25, 7
 adc:	08 95       	ret

00000ade <__divmodhi4>:
 ade:	97 fb       	bst	r25, 7
 ae0:	07 2e       	mov	r0, r23
 ae2:	16 f4       	brtc	.+4      	; 0xae8 <__divmodhi4+0xa>
 ae4:	00 94       	com	r0
 ae6:	06 d0       	rcall	.+12     	; 0xaf4 <__divmodhi4_neg1>
 ae8:	77 fd       	sbrc	r23, 7
 aea:	08 d0       	rcall	.+16     	; 0xafc <__divmodhi4_neg2>
 aec:	0b d0       	rcall	.+22     	; 0xb04 <__udivmodhi4>
 aee:	07 fc       	sbrc	r0, 7
 af0:	05 d0       	rcall	.+10     	; 0xafc <__divmodhi4_neg2>
 af2:	3e f4       	brtc	.+14     	; 0xb02 <__divmodhi4_exit>

00000af4 <__divmodhi4_neg1>:
 af4:	90 95       	com	r25
 af6:	81 95       	neg	r24
 af8:	9f 4f       	sbci	r25, 0xFF	; 255
 afa:	08 95       	ret

00000afc <__divmodhi4_neg2>:
 afc:	70 95       	com	r23
 afe:	61 95       	neg	r22
 b00:	7f 4f       	sbci	r23, 0xFF	; 255

00000b02 <__divmodhi4_exit>:
 b02:	08 95       	ret

00000b04 <__udivmodhi4>:
 b04:	aa 1b       	sub	r26, r26
 b06:	bb 1b       	sub	r27, r27
 b08:	51 e1       	ldi	r21, 0x11	; 17
 b0a:	07 c0       	rjmp	.+14     	; 0xb1a <__udivmodhi4_ep>

00000b0c <__udivmodhi4_loop>:
 b0c:	aa 1f       	adc	r26, r26
 b0e:	bb 1f       	adc	r27, r27
 b10:	a6 17       	cp	r26, r22
 b12:	b7 07       	cpc	r27, r23
 b14:	10 f0       	brcs	.+4      	; 0xb1a <__udivmodhi4_ep>
 b16:	a6 1b       	sub	r26, r22
 b18:	b7 0b       	sbc	r27, r23

00000b1a <__udivmodhi4_ep>:
 b1a:	88 1f       	adc	r24, r24
 b1c:	99 1f       	adc	r25, r25
 b1e:	5a 95       	dec	r21
 b20:	a9 f7       	brne	.-22     	; 0xb0c <__udivmodhi4_loop>
 b22:	80 95       	com	r24
 b24:	90 95       	com	r25
 b26:	bc 01       	movw	r22, r24
 b28:	cd 01       	movw	r24, r26
 b2a:	08 95       	ret

00000b2c <do_rand>:
 b2c:	8f 92       	push	r8
 b2e:	9f 92       	push	r9
 b30:	af 92       	push	r10
 b32:	bf 92       	push	r11
 b34:	cf 92       	push	r12
 b36:	df 92       	push	r13
 b38:	ef 92       	push	r14
 b3a:	ff 92       	push	r15
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	ec 01       	movw	r28, r24
 b42:	68 81       	ld	r22, Y
 b44:	79 81       	ldd	r23, Y+1	; 0x01
 b46:	8a 81       	ldd	r24, Y+2	; 0x02
 b48:	9b 81       	ldd	r25, Y+3	; 0x03
 b4a:	61 15       	cp	r22, r1
 b4c:	71 05       	cpc	r23, r1
 b4e:	81 05       	cpc	r24, r1
 b50:	91 05       	cpc	r25, r1
 b52:	21 f4       	brne	.+8      	; 0xb5c <do_rand+0x30>
 b54:	64 e2       	ldi	r22, 0x24	; 36
 b56:	79 ed       	ldi	r23, 0xD9	; 217
 b58:	8b e5       	ldi	r24, 0x5B	; 91
 b5a:	97 e0       	ldi	r25, 0x07	; 7
 b5c:	2d e1       	ldi	r18, 0x1D	; 29
 b5e:	33 ef       	ldi	r19, 0xF3	; 243
 b60:	41 e0       	ldi	r20, 0x01	; 1
 b62:	50 e0       	ldi	r21, 0x00	; 0
 b64:	38 d0       	rcall	.+112    	; 0xbd6 <__divmodsi4>
 b66:	49 01       	movw	r8, r18
 b68:	5a 01       	movw	r10, r20
 b6a:	9b 01       	movw	r18, r22
 b6c:	ac 01       	movw	r20, r24
 b6e:	a7 ea       	ldi	r26, 0xA7	; 167
 b70:	b1 e4       	ldi	r27, 0x41	; 65
 b72:	4d d0       	rcall	.+154    	; 0xc0e <__muluhisi3>
 b74:	6b 01       	movw	r12, r22
 b76:	7c 01       	movw	r14, r24
 b78:	ac ee       	ldi	r26, 0xEC	; 236
 b7a:	b4 ef       	ldi	r27, 0xF4	; 244
 b7c:	a5 01       	movw	r20, r10
 b7e:	94 01       	movw	r18, r8
 b80:	52 d0       	rcall	.+164    	; 0xc26 <__mulohisi3>
 b82:	dc 01       	movw	r26, r24
 b84:	cb 01       	movw	r24, r22
 b86:	8c 0d       	add	r24, r12
 b88:	9d 1d       	adc	r25, r13
 b8a:	ae 1d       	adc	r26, r14
 b8c:	bf 1d       	adc	r27, r15
 b8e:	b7 ff       	sbrs	r27, 7
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <do_rand+0x6c>
 b92:	01 97       	sbiw	r24, 0x01	; 1
 b94:	a1 09       	sbc	r26, r1
 b96:	b0 48       	sbci	r27, 0x80	; 128
 b98:	88 83       	st	Y, r24
 b9a:	99 83       	std	Y+1, r25	; 0x01
 b9c:	aa 83       	std	Y+2, r26	; 0x02
 b9e:	bb 83       	std	Y+3, r27	; 0x03
 ba0:	9f 77       	andi	r25, 0x7F	; 127
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	ff 90       	pop	r15
 ba8:	ef 90       	pop	r14
 baa:	df 90       	pop	r13
 bac:	cf 90       	pop	r12
 bae:	bf 90       	pop	r11
 bb0:	af 90       	pop	r10
 bb2:	9f 90       	pop	r9
 bb4:	8f 90       	pop	r8
 bb6:	08 95       	ret

00000bb8 <rand_r>:
 bb8:	b9 cf       	rjmp	.-142    	; 0xb2c <do_rand>

00000bba <rand>:
 bba:	80 e0       	ldi	r24, 0x00	; 0
 bbc:	91 e0       	ldi	r25, 0x01	; 1
 bbe:	b6 cf       	rjmp	.-148    	; 0xb2c <do_rand>

00000bc0 <srand>:
 bc0:	a0 e0       	ldi	r26, 0x00	; 0
 bc2:	b0 e0       	ldi	r27, 0x00	; 0
 bc4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 bc8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 bcc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 bd0:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 bd4:	08 95       	ret

00000bd6 <__divmodsi4>:
 bd6:	05 2e       	mov	r0, r21
 bd8:	97 fb       	bst	r25, 7
 bda:	16 f4       	brtc	.+4      	; 0xbe0 <__divmodsi4+0xa>
 bdc:	00 94       	com	r0
 bde:	0f d0       	rcall	.+30     	; 0xbfe <__negsi2>
 be0:	57 fd       	sbrc	r21, 7
 be2:	05 d0       	rcall	.+10     	; 0xbee <__divmodsi4_neg2>
 be4:	24 d0       	rcall	.+72     	; 0xc2e <__udivmodsi4>
 be6:	07 fc       	sbrc	r0, 7
 be8:	02 d0       	rcall	.+4      	; 0xbee <__divmodsi4_neg2>
 bea:	46 f4       	brtc	.+16     	; 0xbfc <__divmodsi4_exit>
 bec:	08 c0       	rjmp	.+16     	; 0xbfe <__negsi2>

00000bee <__divmodsi4_neg2>:
 bee:	50 95       	com	r21
 bf0:	40 95       	com	r20
 bf2:	30 95       	com	r19
 bf4:	21 95       	neg	r18
 bf6:	3f 4f       	sbci	r19, 0xFF	; 255
 bf8:	4f 4f       	sbci	r20, 0xFF	; 255
 bfa:	5f 4f       	sbci	r21, 0xFF	; 255

00000bfc <__divmodsi4_exit>:
 bfc:	08 95       	ret

00000bfe <__negsi2>:
 bfe:	90 95       	com	r25
 c00:	80 95       	com	r24
 c02:	70 95       	com	r23
 c04:	61 95       	neg	r22
 c06:	7f 4f       	sbci	r23, 0xFF	; 255
 c08:	8f 4f       	sbci	r24, 0xFF	; 255
 c0a:	9f 4f       	sbci	r25, 0xFF	; 255
 c0c:	08 95       	ret

00000c0e <__muluhisi3>:
 c0e:	31 d0       	rcall	.+98     	; 0xc72 <__umulhisi3>
 c10:	a5 9f       	mul	r26, r21
 c12:	90 0d       	add	r25, r0
 c14:	b4 9f       	mul	r27, r20
 c16:	90 0d       	add	r25, r0
 c18:	a4 9f       	mul	r26, r20
 c1a:	80 0d       	add	r24, r0
 c1c:	91 1d       	adc	r25, r1
 c1e:	11 24       	eor	r1, r1
 c20:	08 95       	ret

00000c22 <__mulshisi3>:
 c22:	b7 ff       	sbrs	r27, 7
 c24:	f4 cf       	rjmp	.-24     	; 0xc0e <__muluhisi3>

00000c26 <__mulohisi3>:
 c26:	f3 df       	rcall	.-26     	; 0xc0e <__muluhisi3>
 c28:	82 1b       	sub	r24, r18
 c2a:	93 0b       	sbc	r25, r19
 c2c:	08 95       	ret

00000c2e <__udivmodsi4>:
 c2e:	a1 e2       	ldi	r26, 0x21	; 33
 c30:	1a 2e       	mov	r1, r26
 c32:	aa 1b       	sub	r26, r26
 c34:	bb 1b       	sub	r27, r27
 c36:	fd 01       	movw	r30, r26
 c38:	0d c0       	rjmp	.+26     	; 0xc54 <__udivmodsi4_ep>

00000c3a <__udivmodsi4_loop>:
 c3a:	aa 1f       	adc	r26, r26
 c3c:	bb 1f       	adc	r27, r27
 c3e:	ee 1f       	adc	r30, r30
 c40:	ff 1f       	adc	r31, r31
 c42:	a2 17       	cp	r26, r18
 c44:	b3 07       	cpc	r27, r19
 c46:	e4 07       	cpc	r30, r20
 c48:	f5 07       	cpc	r31, r21
 c4a:	20 f0       	brcs	.+8      	; 0xc54 <__udivmodsi4_ep>
 c4c:	a2 1b       	sub	r26, r18
 c4e:	b3 0b       	sbc	r27, r19
 c50:	e4 0b       	sbc	r30, r20
 c52:	f5 0b       	sbc	r31, r21

00000c54 <__udivmodsi4_ep>:
 c54:	66 1f       	adc	r22, r22
 c56:	77 1f       	adc	r23, r23
 c58:	88 1f       	adc	r24, r24
 c5a:	99 1f       	adc	r25, r25
 c5c:	1a 94       	dec	r1
 c5e:	69 f7       	brne	.-38     	; 0xc3a <__udivmodsi4_loop>
 c60:	60 95       	com	r22
 c62:	70 95       	com	r23
 c64:	80 95       	com	r24
 c66:	90 95       	com	r25
 c68:	9b 01       	movw	r18, r22
 c6a:	ac 01       	movw	r20, r24
 c6c:	bd 01       	movw	r22, r26
 c6e:	cf 01       	movw	r24, r30
 c70:	08 95       	ret

00000c72 <__umulhisi3>:
 c72:	a2 9f       	mul	r26, r18
 c74:	b0 01       	movw	r22, r0
 c76:	b3 9f       	mul	r27, r19
 c78:	c0 01       	movw	r24, r0
 c7a:	a3 9f       	mul	r26, r19
 c7c:	70 0d       	add	r23, r0
 c7e:	81 1d       	adc	r24, r1
 c80:	11 24       	eor	r1, r1
 c82:	91 1d       	adc	r25, r1
 c84:	b2 9f       	mul	r27, r18
 c86:	70 0d       	add	r23, r0
 c88:	81 1d       	adc	r24, r1
 c8a:	11 24       	eor	r1, r1
 c8c:	91 1d       	adc	r25, r1
 c8e:	08 95       	ret

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
