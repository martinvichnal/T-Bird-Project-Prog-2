
T-Bird-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002b6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  00000356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e66  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b01  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006c0  00000000  00000000  00001dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  00002654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ba  00000000  00000000  00002b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	63 d0       	rcall	.+198    	; 0x18a <main>
  c4:	f6 c0       	rjmp	.+492    	; 0x2b2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
	}
}


ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
			//h_blue = 0;
		//}
		//else { PORTE |= (1<<PE3); }
	//}
	
	sevenSegment_PutNumber(timerNum);
  ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  f2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
  f6:	7f d0       	rcall	.+254    	; 0x1f6 <sevenSegment_PutNumber>
	

	if (!ido--)
  f8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <ido>
  fc:	9f ef       	ldi	r25, 0xFF	; 255
  fe:	98 0f       	add	r25, r24
 100:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ido>
 104:	81 11       	cpse	r24, r1
 106:	10 c0       	rjmp	.+32     	; 0x128 <__vector_16+0x60>
	{
		// 7segmens szamlalo
		timerNum++;
 108:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 10c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 116:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
		if (timerNum == 9999)
 11a:	8f 30       	cpi	r24, 0x0F	; 15
 11c:	97 42       	sbci	r25, 0x27	; 39
 11e:	21 f4       	brne	.+8      	; 0x128 <__vector_16+0x60>
		{
			timerNum = 0;
 120:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 124:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		}
	}
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0b be       	out	0x3b, r0	; 59
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <init>:

void init()
{
	// Ha bit 1 akkor kimenet, ha bit 0 akkor bemenet
	
	DDRB &= 0x0F;	// Mask 0b00001111
 14e:	87 b3       	in	r24, 0x17	; 23
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	87 bb       	out	0x17, r24	; 23
	DDRB |= 0xF0;	// Led 0-3 -> 11110000
 154:	87 b3       	in	r24, 0x17	; 23
 156:	80 6f       	ori	r24, 0xF0	; 240
 158:	87 bb       	out	0x17, r24	; 23
	DDRD &= 0x0F;	// Mask 0b00001111
 15a:	81 b3       	in	r24, 0x11	; 17
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	81 bb       	out	0x11, r24	; 17
	DDRD |= 0xF0;	// Led 4-7 - 11110000
 160:	81 b3       	in	r24, 0x11	; 17
 162:	80 6f       	ori	r24, 0xF0	; 240
 164:	81 bb       	out	0x11, r24	; 17

	DDRG = 0x00;	// Pushbuttons K0-K4
 166:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	//DDRC = 0x88;	// Keyboard, -> 10001000 || Red, KBD1row?

	DDRE = 0x0C;	// RGB led -> 00001100 || Green, Blue
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	82 b9       	out	0x02, r24	; 2
	
	DDRA = 0xFF;	// 7 Segment display
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	8a bb       	out	0x1a, r24	; 26
	
	// Matrix billentyuzet
	DDRC &= 0x80;	// Maszk beallitasa hogy az elozot ne irjuk felul
 172:	84 b3       	in	r24, 0x14	; 20
 174:	80 78       	andi	r24, 0x80	; 128
 176:	84 bb       	out	0x14, r24	; 20
	DDRC |= 0x78;	// 78 ha csak a matrixot hasznaljuk
 178:	84 b3       	in	r24, 0x14	; 20
 17a:	88 67       	ori	r24, 0x78	; 120
 17c:	84 bb       	out	0x14, r24	; 20
	
	
	
	// Timer init:
	TCCR0 = 0 << CS02 | 1 << CS01 | 0 << CS00 | 1 << WGM00 | 1 << WGM01;
 17e:	8a e4       	ldi	r24, 0x4A	; 74
 180:	83 bf       	out	0x33, r24	; 51
	//TCCR0 = 1 << CS01 | 1 << CS00;
	TIMSK = 1 << TOIE0;				// OverFlow enable
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	87 bf       	out	0x37, r24	; 55
	sei();
 186:	78 94       	sei
 188:	08 95       	ret

0000018a <main>:
uint8_t b;


int main(void)
{
	init();
 18a:	e1 df       	rcall	.-62     	; 0x14e <init>
	

	while (1)
	{
		b = matrix();
 18c:	07 d0       	rcall	.+14     	; 0x19c <matrix>
 18e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <b>
 192:	8a 30       	cpi	r24, 0x0A	; 10
		if (b <= 9)
 194:	d8 f7       	brcc	.-10     	; 0x18c <main+0x2>
 196:	80 68       	ori	r24, 0x80	; 128
		{
			PORTA = 0x80 | b;
 198:	8b bb       	out	0x1b, r24	; 27
 19a:	f8 cf       	rjmp	.-16     	; 0x18c <main+0x2>

0000019c <matrix>:
 19c:	38 e0       	ldi	r19, 0x08	; 8
{
	uint8_t sor = 0x08;		// elso sor
	uint8_t beolvas = 0;
	uint8_t i = 0;
	
	while (sor <= 0x40)
 19e:	1b c0       	rjmp	.+54     	; 0x1d6 <matrix+0x3a>
	{
		PORTC &= 0x80;
 1a0:	85 b3       	in	r24, 0x15	; 21
 1a2:	80 78       	andi	r24, 0x80	; 128
 1a4:	85 bb       	out	0x15, r24	; 21
		PORTC |= sor;			// megcimezzuk a sort
 1a6:	85 b3       	in	r24, 0x15	; 21
 1a8:	83 2b       	or	r24, r19
 1aa:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	8f e0       	ldi	r24, 0x0F	; 15
 1ae:	97 e2       	ldi	r25, 0x27	; 39
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <matrix+0x14>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <matrix+0x1a>
 1b6:	00 00       	nop
		_delay_ms(5);
		
		beolvas = PINC & 0x7F;	// ne modositsa az RGB piros allpota.
 1b8:	23 b3       	in	r18, 0x13	; 19
 1ba:	2f 77       	andi	r18, 0x7F	; 127
		
		while(i < 12)
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <matrix+0x34>
		{
			if (bill[i] == beolvas)
 1c0:	e8 2f       	mov	r30, r24
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	e0 50       	subi	r30, 0x00	; 0
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	90 81       	ld	r25, Z
 1ca:	29 17       	cp	r18, r25
 1cc:	39 f0       	breq	.+14     	; 0x1dc <matrix+0x40>
			{
				return i;
			}
			i++;
 1ce:	8f 5f       	subi	r24, 0xFF	; 255
		PORTC |= sor;			// megcimezzuk a sort
		_delay_ms(5);
		
		beolvas = PINC & 0x7F;	// ne modositsa az RGB piros allpota.
		
		while(i < 12)
 1d0:	8c 30       	cpi	r24, 0x0C	; 12
 1d2:	b0 f3       	brcs	.-20     	; 0x1c0 <matrix+0x24>
				return i;
			}
			i++;
		}
		i = 0;
		sor<<=1;
 1d4:	33 0f       	add	r19, r19
{
	uint8_t sor = 0x08;		// elso sor
	uint8_t beolvas = 0;
	uint8_t i = 0;
	
	while (sor <= 0x40)
 1d6:	31 34       	cpi	r19, 0x41	; 65
 1d8:	18 f3       	brcs	.-58     	; 0x1a0 <matrix+0x4>
			i++;
		}
		i = 0;
		sor<<=1;
	}
	return 12;
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	08 95       	ret

000001de <sevenSegment_PutDigit>:
uint8_t digit[4] = {0};
int j = 0;

void sevenSegment_PutDigit(uint8_t digit, uint8_t num)
{
	if (digit > 3)
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	48 f4       	brcc	.+18     	; 0x1f4 <sevenSegment_PutDigit+0x16>
	return;
	if (num > 9)
 1e2:	6a 30       	cpi	r22, 0x0A	; 10
 1e4:	38 f4       	brcc	.+14     	; 0x1f4 <sevenSegment_PutDigit+0x16>
	return;

	PORTA = 0x80 | (digit) << 4 | num;
 1e6:	20 e1       	ldi	r18, 0x10	; 16
 1e8:	82 9f       	mul	r24, r18
 1ea:	c0 01       	movw	r24, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	86 2b       	or	r24, r22
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	8b bb       	out	0x1b, r24	; 27
 1f4:	08 95       	ret

000001f6 <sevenSegment_PutNumber>:
}
void sevenSegment_PutNumber(int num)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ec 01       	movw	r28, r24
	// Digit valaszto:			// Helyiertekek
	digit[0] = num%10;			// egyes
 1fc:	2a e0       	ldi	r18, 0x0A	; 10
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	30 d0       	rcall	.+96     	; 0x264 <__divmodhi4>
 204:	e1 e1       	ldi	r30, 0x11	; 17
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	80 83       	st	Z, r24
	digit[1] = (num/10)%10;		// tizes
 20a:	cb 01       	movw	r24, r22
 20c:	b9 01       	movw	r22, r18
 20e:	2a d0       	rcall	.+84     	; 0x264 <__divmodhi4>
 210:	81 83       	std	Z+1, r24	; 0x01
	digit[2] = (num/100)%10;	// szazas
 212:	ce 01       	movw	r24, r28
 214:	64 e6       	ldi	r22, 0x64	; 100
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	25 d0       	rcall	.+74     	; 0x264 <__divmodhi4>
 21a:	cb 01       	movw	r24, r22
 21c:	b9 01       	movw	r22, r18
 21e:	22 d0       	rcall	.+68     	; 0x264 <__divmodhi4>
 220:	82 83       	std	Z+2, r24	; 0x02
	digit[3] = (num/1000)%10;	// ezrese
 222:	ce 01       	movw	r24, r28
 224:	68 ee       	ldi	r22, 0xE8	; 232
 226:	73 e0       	ldi	r23, 0x03	; 3
 228:	1d d0       	rcall	.+58     	; 0x264 <__divmodhi4>
 22a:	cb 01       	movw	r24, r22
 22c:	b9 01       	movw	r22, r18
 22e:	1a d0       	rcall	.+52     	; 0x264 <__divmodhi4>
 230:	83 83       	std	Z+3, r24	; 0x03
 232:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <j>
	
	j = (j + 1) % 4;			// Hany Digites
 236:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <j+0x1>
 23a:	01 96       	adiw	r24, 0x01	; 1
 23c:	83 70       	andi	r24, 0x03	; 3
 23e:	90 78       	andi	r25, 0x80	; 128
 240:	99 23       	and	r25, r25
 242:	24 f4       	brge	.+8      	; 0x24c <sevenSegment_PutNumber+0x56>
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	8c 6f       	ori	r24, 0xFC	; 252
 248:	9f 6f       	ori	r25, 0xFF	; 255
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <j+0x1>
 250:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <j>
	sevenSegment_PutDigit(j, digit[j]);
 254:	fc 01       	movw	r30, r24
 256:	ef 5e       	subi	r30, 0xEF	; 239
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	60 81       	ld	r22, Z
 25c:	c0 df       	rcall	.-128    	; 0x1de <sevenSegment_PutDigit>
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <__divmodhi4>:
 264:	97 fb       	bst	r25, 7
 266:	07 2e       	mov	r0, r23
 268:	16 f4       	brtc	.+4      	; 0x26e <__divmodhi4+0xa>
 26a:	00 94       	com	r0
 26c:	06 d0       	rcall	.+12     	; 0x27a <__divmodhi4_neg1>
 26e:	77 fd       	sbrc	r23, 7
 270:	08 d0       	rcall	.+16     	; 0x282 <__divmodhi4_neg2>
 272:	0b d0       	rcall	.+22     	; 0x28a <__udivmodhi4>
 274:	07 fc       	sbrc	r0, 7
 276:	05 d0       	rcall	.+10     	; 0x282 <__divmodhi4_neg2>
 278:	3e f4       	brtc	.+14     	; 0x288 <__divmodhi4_exit>

0000027a <__divmodhi4_neg1>:
 27a:	90 95       	com	r25
 27c:	81 95       	neg	r24
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	08 95       	ret

00000282 <__divmodhi4_neg2>:
 282:	70 95       	com	r23
 284:	61 95       	neg	r22
 286:	7f 4f       	sbci	r23, 0xFF	; 255

00000288 <__divmodhi4_exit>:
 288:	08 95       	ret

0000028a <__udivmodhi4>:
 28a:	aa 1b       	sub	r26, r26
 28c:	bb 1b       	sub	r27, r27
 28e:	51 e1       	ldi	r21, 0x11	; 17
 290:	07 c0       	rjmp	.+14     	; 0x2a0 <__udivmodhi4_ep>

00000292 <__udivmodhi4_loop>:
 292:	aa 1f       	adc	r26, r26
 294:	bb 1f       	adc	r27, r27
 296:	a6 17       	cp	r26, r22
 298:	b7 07       	cpc	r27, r23
 29a:	10 f0       	brcs	.+4      	; 0x2a0 <__udivmodhi4_ep>
 29c:	a6 1b       	sub	r26, r22
 29e:	b7 0b       	sbc	r27, r23

000002a0 <__udivmodhi4_ep>:
 2a0:	88 1f       	adc	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	5a 95       	dec	r21
 2a6:	a9 f7       	brne	.-22     	; 0x292 <__udivmodhi4_loop>
 2a8:	80 95       	com	r24
 2aa:	90 95       	com	r25
 2ac:	bc 01       	movw	r22, r24
 2ae:	cd 01       	movw	r24, r26
 2b0:	08 95       	ret

000002b2 <_exit>:
 2b2:	f8 94       	cli

000002b4 <__stop_program>:
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <__stop_program>
