
T-Bird-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000934  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080012a  0080012a  000009f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001286  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bbe  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099b  00000000  00000000  0000296c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000532  00000000  00000000  0000353c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000844  00000000  00000000  00003a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000042b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	fe c0       	rjmp	.+508    	; 0x23e <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 34       	cpi	r26, 0x46	; 70
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	29 d1       	rcall	.+594    	; 0x316 <main>
  c4:	35 c4       	rjmp	.+2154   	; 0x930 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_busy>:
}

void lcd_busy(void)
{											//BF olvasása
	uint8_t busy;
	LCD_DATA_DDR &= ~(1<<PE7);				//ott olvassuk majd a BF-et (D7-PE7)
  c8:	82 b1       	in	r24, 0x02	; 2
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	82 b9       	out	0x02, r24	; 2
	LCD_CMD_PORT &= ~(1<<LCD_RS);			//Státusz infó
  ce:	e2 e6       	ldi	r30, 0x62	; 98
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	80 83       	st	Z, r24
	LCD_CMD_PORT |= (1<<LCD_RW);			//olvasás
  d8:	80 81       	ld	r24, Z
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	80 83       	st	Z, r24
	
	do{
		busy = 0;
		LCD_CMD_PORT |= (1<<LCD_EN);		//EN<-1
  de:	e2 e6       	ldi	r30, 0x62	; 98
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_busy+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_busy+0x28>
		_delay_us(1);						//felfutó
		busy=(LCD_DATA_PIN&(1<<PE7));		//átadjuk a BF értékét
  f0:	81 b1       	in	r24, 0x01	; 1
  f2:	80 78       	andi	r24, 0x80	; 128
		LCD_CMD_PORT &= ~(1<<LCD_EN);		//EN<-0
  f4:	90 81       	ld	r25, Z
  f6:	97 7f       	andi	r25, 0xF7	; 247
  f8:	90 83       	st	Z, r25
  fa:	92 e0       	ldi	r25, 0x02	; 2
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_busy+0x34>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_busy+0x3a>
		_delay_us(1);
		LCD_CMD_PORT |= (1<<LCD_EN);		//EN<-1
 102:	90 81       	ld	r25, Z
 104:	98 60       	ori	r25, 0x08	; 8
 106:	90 83       	st	Z, r25
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_busy+0x42>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_busy+0x48>
		_delay_us(1);
		LCD_CMD_PORT &= ~(1<<LCD_EN);		//EN<-0
 110:	90 81       	ld	r25, Z
 112:	97 7f       	andi	r25, 0xF7	; 247
 114:	90 83       	st	Z, r25
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_busy+0x50>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_busy+0x56>
		_delay_us(1);
	}while(busy);
 11e:	81 11       	cpse	r24, r1
 120:	de cf       	rjmp	.-68     	; 0xde <lcd_busy+0x16>
	
	LCD_CMD_PORT &= ~(1<<LCD_RW);			//R/W<-0 write
 122:	80 81       	ld	r24, Z
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	80 83       	st	Z, r24
	LCD_DATA_DDR |= (1<<PE7);				//PE7<-1
 128:	82 b1       	in	r24, 0x02	; 2
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	82 b9       	out	0x02, r24	; 2
 12e:	08 95       	ret

00000130 <lcd_clk>:

// E pin 0___|1|___0
void lcd_clk(void)
{
	// E <- 0	0___
	PORT_LCD_E &= ~(1 << PIN_LCD_E);
 130:	e2 e6       	ldi	r30, 0x62	; 98
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e9       	ldi	r24, 0x9F	; 159
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_clk+0xe>
 142:	00 c0       	rjmp	.+0      	; 0x144 <lcd_clk+0x14>
 144:	00 00       	nop
	_delay_ms(2);
	// E <- 1	|1|
	PORT_LCD_E |= (1 << PIN_LCD_E);
 146:	80 81       	ld	r24, Z
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	80 83       	st	Z, r24
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	97 e2       	ldi	r25, 0x27	; 39
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_clk+0x20>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_clk+0x26>
 156:	00 00       	nop
	_delay_ms(5);
	// E <- 0	___0
	PORT_LCD_E &= ~(1 << PIN_LCD_E);
 158:	80 81       	ld	r24, Z
 15a:	87 7f       	andi	r24, 0xF7	; 247
 15c:	80 83       	st	Z, r24
 15e:	8f e6       	ldi	r24, 0x6F	; 111
 160:	97 e1       	ldi	r25, 0x17	; 23
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_clk+0x32>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_clk+0x38>
 168:	00 00       	nop
 16a:	08 95       	ret

0000016c <lcd_write_cmd>:

// Parancs kuldes
void lcd_write_cmd(uint8_t cmd)
{
	// RS <- 0
	PORT_LCD_RS &= ~(1 << PIN_LCD_RS);
 16c:	e2 e6       	ldi	r30, 0x62	; 98
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	90 81       	ld	r25, Z
 172:	9d 7f       	andi	r25, 0xFD	; 253
 174:	90 83       	st	Z, r25
	// R/W <- 0
	PORT_LCD_RW &= ~(1 << PIN_LCD_RW);
 176:	90 81       	ld	r25, Z
 178:	9b 7f       	andi	r25, 0xFB	; 251
 17a:	90 83       	st	Z, r25
	// 1. Felso 4 bit
	PORT_LCD_DATA &= MASK_H_LCD_DATA;
 17c:	93 b1       	in	r25, 0x03	; 3
 17e:	90 7f       	andi	r25, 0xF0	; 240
 180:	93 b9       	out	0x03, r25	; 3
	PORT_LCD_DATA |= cmd & MASK_H_LCD_DATA;
 182:	93 b1       	in	r25, 0x03	; 3
 184:	80 7f       	andi	r24, 0xF0	; 240
 186:	98 2b       	or	r25, r24
 188:	93 b9       	out	0x03, r25	; 3
	// E 0___|1|___0
	lcd_clk();
 18a:	d2 df       	rcall	.-92     	; 0x130 <lcd_clk>
	// 2. Felso 4 bit
	PORT_LCD_DATA &= MASK_L_LCD_DATA;
 18c:	83 b1       	in	r24, 0x03	; 3
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	83 b9       	out	0x03, r24	; 3
	PORT_LCD_DATA |= cmd << MASK_L_LCD_DATA;
 192:	83 b1       	in	r24, 0x03	; 3
	// E 0___|1|___0
	lcd_clk();
 194:	83 b9       	out	0x03, r24	; 3
 196:	cc cf       	rjmp	.-104    	; 0x130 <lcd_clk>
 198:	08 95       	ret

0000019a <lcd_init>:
#include "lcd.h"

// LCD inicializalas
void lcd_init(void)
{
	DDRE |= 0xF0;
 19a:	82 b1       	in	r24, 0x02	; 2
 19c:	80 6f       	ori	r24, 0xF0	; 240
 19e:	82 b9       	out	0x02, r24	; 2
	//data7...4 out
	DDRF |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN);		//RS, R/W, EN out
 1a0:	e1 e6       	ldi	r30, 0x61	; 97
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8e 60       	ori	r24, 0x0E	; 14
 1a8:	80 83       	st	Z, r24
	//írás
	PORTF &= ~(LCD_RW);
 1aa:	e2 e6       	ldi	r30, 0x62	; 98
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	80 83       	st	Z, r24
	//R/W<-0 ->write
	PORTF &= ~(1<<LCD_RS);
 1b4:	80 81       	ld	r24, Z
 1b6:	8d 7f       	andi	r24, 0xFD	; 253
 1b8:	80 83       	st	Z, r24
	//RS <-0 ->parancs
	PORTE = 0x20;
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	83 b9       	out	0x03, r24	; 3
	//0x20 parancs: Function set - Sets interface data length
	lcd_clk();
 1be:	b8 df       	rcall	.-144    	; 0x130 <lcd_clk>
	//delay
	lcd_clk();
 1c0:	b7 df       	rcall	.-146    	; 0x130 <lcd_clk>
	//__| |__
	lcd_clk();
 1c2:	b6 df       	rcall	.-148    	; 0x130 <lcd_clk>
	//4 bites üzemmód, 8x5pixel, 2soros
	//üzemmód választás
	//nem tudjuk, hogy bekapcsolás után éppen milyenben van
	lcd_write_cmd(0x28);
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	d2 df       	rcall	.-92     	; 0x16c <lcd_write_cmd>
	lcd_write_cmd(0x28);
 1c8:	88 e2       	ldi	r24, 0x28	; 40
 1ca:	d0 df       	rcall	.-96     	; 0x16c <lcd_write_cmd>
	lcd_write_cmd(0x28);
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	ce df       	rcall	.-100    	; 0x16c <lcd_write_cmd>
	//lcd alaphelyzetbe
	lcd_write_cmd(0x02);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	cc df       	rcall	.-104    	; 0x16c <lcd_write_cmd>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
	//lcd törlése
	lcd_write_cmd(0x01);
 1d6:	ca df       	rcall	.-108    	; 0x16c <lcd_write_cmd>
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	c8 cf       	rjmp	.-112    	; 0x16c <lcd_write_cmd>
	//kurzor villog, aláhúzás be, LCD be
	//LCD_cmd(0x08 | (1<<LCD_E) | (1<<LCD_CUR) | (1<<LCD_BL));
	//kurzor villog ki, aláhúzás be, LCD be
	//LCD_cmd(0x08 | (1<<LCD_E) | (1<<LCD_CUR) | (0<<LCD_BL));
	//kurzor villog ki, aláhúzás ki, LCD be
	lcd_write_cmd(0x08 | (1<<LCD_E) | (0<<LCD_CUR) | (0<<LCD_BL));
 1dc:	08 95       	ret

000001de <lcd_write_data>:
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
 1e2:	72 df       	rcall	.-284    	; 0xc8 <lcd_busy>

// Adat kuldes
void lcd_write_data(uint8_t data)
{
	lcd_busy();								//Megvárjuk még felszabadul
	LCD_CMD_PORT |= (1<<LCD_RS);			//Adatregiszter
 1e4:	e2 e6       	ldi	r30, 0x62	; 98
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW);			//írás
 1ee:	80 81       	ld	r24, Z
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN);			//EN<-0
 1f4:	80 81       	ld	r24, Z
 1f6:	87 7f       	andi	r24, 0xF7	; 247
 1f8:	80 83       	st	Z, r24
	LCD_DATA_PORT &= ~(0xF0);
 1fa:	83 b1       	in	r24, 0x03	; 3
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (data&0xF0);			//4 felsõ bit kitétele
 200:	83 b1       	in	r24, 0x03	; 3
 202:	9c 2f       	mov	r25, r28
 204:	90 7f       	andi	r25, 0xF0	; 240
 206:	89 2b       	or	r24, r25
	lcd_clk();							//__| |__
 208:	83 b9       	out	0x03, r24	; 3
 20a:	92 df       	rcall	.-220    	; 0x130 <lcd_clk>
	LCD_DATA_PORT &= ~(0xF0);
 20c:	83 b1       	in	r24, 0x03	; 3
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((data<<4)&0xF0);		//alsó 4 bit kitétele
 212:	23 b1       	in	r18, 0x03	; 3
 214:	30 e1       	ldi	r19, 0x10	; 16
 216:	c3 9f       	mul	r28, r19
 218:	c0 01       	movw	r24, r0
 21a:	11 24       	eor	r1, r1
 21c:	82 2b       	or	r24, r18
	lcd_clk();
 21e:	83 b9       	out	0x03, r24	; 3
 220:	87 df       	rcall	.-242    	; 0x130 <lcd_clk>
}
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <lcd_Puts>:
	_delay_ms(3);
}


void lcd_Puts(char*s)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ec 01       	movw	r28, r24
	while (*s)
 22c:	02 c0       	rjmp	.+4      	; 0x232 <lcd_Puts+0xc>
	{
		lcd_write_data(*s);
 22e:	d7 df       	rcall	.-82     	; 0x1de <lcd_write_data>
		s++;
 230:	21 96       	adiw	r28, 0x01	; 1
}


void lcd_Puts(char*s)
{
	while (*s)
 232:	88 81       	ld	r24, Y
 234:	81 11       	cpse	r24, r1
 236:	fb cf       	rjmp	.-10     	; 0x22e <lcd_Puts+0x8>
	{
		lcd_write_data(*s);
		s++;
	}
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <__vector_16>:
	}
}


ISR(TIMER0_OVF_vect)
{
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	0b b6       	in	r0, 0x3b	; 59
 24a:	0f 92       	push	r0
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	rgb_pwm_handling();
 264:	06 d1       	rcall	.+524    	; 0x472 <rgb_pwm_handling>
	//sevenSegment_PutNumber(timerNum);

	if (!ido--)
 266:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ido>
 26a:	9f ef       	ldi	r25, 0xFF	; 255
 26c:	98 0f       	add	r25, r24
 26e:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <ido>
 272:	81 11       	cpse	r24, r1
 274:	10 c0       	rjmp	.+32     	; 0x296 <__vector_16+0x58>
	{
		// 7segmens szamlalo
		timerNum++;
 276:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 27a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x1>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__data_end+0x1>
 284:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
		if (timerNum == 9999)
 288:	8f 30       	cpi	r24, 0x0F	; 15
 28a:	97 42       	sbci	r25, 0x27	; 39
 28c:	21 f4       	brne	.+8      	; 0x296 <__vector_16+0x58>
		{
			timerNum = 0;
 28e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x1>
 292:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
		}
	}
}
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <init>:
void init()
{
	// 1 - output
	// 0 - input

	DDRB &= 0x0F;	// led mask	-> 00001111 (0 - 3)
 2bc:	87 b3       	in	r24, 0x17	; 23
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	87 bb       	out	0x17, r24	; 23
	DDRB |= 0xF0;	// led		-> 11110000 (0 - 3)
 2c2:	87 b3       	in	r24, 0x17	; 23
 2c4:	80 6f       	ori	r24, 0xF0	; 240
 2c6:	87 bb       	out	0x17, r24	; 23
	DDRD &= 0x0F;	// led mask	-> 00001111 (0 - 3)
 2c8:	81 b3       	in	r24, 0x11	; 17
 2ca:	8f 70       	andi	r24, 0x0F	; 15
 2cc:	81 bb       	out	0x11, r24	; 17
	DDRD |= 0xF0;	// led		-> 11110000 (4 - 7)
 2ce:	81 b3       	in	r24, 0x11	; 17
 2d0:	80 6f       	ori	r24, 0xF0	; 240
 2d2:	81 bb       	out	0x11, r24	; 17

	//DDRG = 0x00;	// Pushbuttons K0-K4
	DDRG &= 0xE0;	// Pushbuttons mask	-> 11100000	(K0 - K4)
 2d4:	e4 e6       	ldi	r30, 0x64	; 100
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 7e       	andi	r24, 0xE0	; 224
 2dc:	80 83       	st	Z, r24
	DDRG |= 0x00;	// Pushbuttons		-> 00000000 (K0 - K4)
 2de:	80 81       	ld	r24, Z
 2e0:	80 83       	st	Z, r24
	
	DDRE &= 0xF3;	// RGB mask	-> 11110011 (Blue & Green)
 2e2:	82 b1       	in	r24, 0x02	; 2
 2e4:	83 7f       	andi	r24, 0xF3	; 243
 2e6:	82 b9       	out	0x02, r24	; 2
	DDRE |= 0x0C;	// RGB led	-> 00001100 (Blue & Green)
 2e8:	82 b1       	in	r24, 0x02	; 2
 2ea:	8c 60       	ori	r24, 0x0C	; 12
 2ec:	82 b9       	out	0x02, r24	; 2
	DDRC &= 0x7F;	// RGB mask	-> 01111111 (Red)
 2ee:	84 b3       	in	r24, 0x14	; 20
 2f0:	8f 77       	andi	r24, 0x7F	; 127
 2f2:	84 bb       	out	0x14, r24	; 20
	DDRC |= 80;		// RGB led	-> 10000000 (Red)
 2f4:	84 b3       	in	r24, 0x14	; 20
 2f6:	80 65       	ori	r24, 0x50	; 80
 2f8:	84 bb       	out	0x14, r24	; 20
	
	DDRA = 0xFF;	// 7 Segment display
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	8a bb       	out	0x1a, r24	; 26
	
	// Matrix keyboard
	DDRC &= 0x80;	// Matrix mask	->	10000000
 2fe:	84 b3       	in	r24, 0x14	; 20
 300:	80 78       	andi	r24, 0x80	; 128
 302:	84 bb       	out	0x14, r24	; 20
	DDRC |= 0x78;	// Matrix		->	01111000
 304:	84 b3       	in	r24, 0x14	; 20
 306:	88 67       	ori	r24, 0x78	; 120
 308:	84 bb       	out	0x14, r24	; 20
	
	
	// Timer init:
	TCCR0 = 0 << CS02 | 1 << CS01 | 0 << CS00 | 1 << WGM00 | 1 << WGM01;
 30a:	8a e4       	ldi	r24, 0x4A	; 74
 30c:	83 bf       	out	0x33, r24	; 51
	TIMSK = 1 << TOIE0;				// OverFlow enable
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	87 bf       	out	0x37, r24	; 55
	sei();
 312:	78 94       	sei
 314:	08 95       	ret

00000316 <main>:
uint8_t b;


int main(void)
{
	init();
 316:	d2 df       	rcall	.-92     	; 0x2bc <init>
	
	lcd_init();
 318:	40 df       	rcall	.-384    	; 0x19a <lcd_init>
	lcd_write_cmd(0x01);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	27 df       	rcall	.-434    	; 0x16c <lcd_write_cmd>
	lcd_Puts("Vichnal Martin");
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	81 df       	rcall	.-254    	; 0x226 <lcd_Puts>
	lcd_write_cmd(0xC0);
 324:	80 ec       	ldi	r24, 0xC0	; 192
 326:	22 df       	rcall	.-444    	; 0x16c <lcd_write_cmd>
	lcd_Puts("Hello World!");
 328:	80 e1       	ldi	r24, 0x10	; 16
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	7c df       	rcall	.-264    	; 0x226 <lcd_Puts>
 32e:	0f 2e       	mov	r0, r31
	
	rgb_Show(0, 0, 100, 100);
 330:	f4 e6       	ldi	r31, 0x64	; 100
 332:	cf 2e       	mov	r12, r31
 334:	f0 2d       	mov	r31, r0
 336:	e1 2c       	mov	r14, r1
 338:	f1 2c       	mov	r15, r1
 33a:	08 ec       	ldi	r16, 0xC8	; 200
 33c:	12 e4       	ldi	r17, 0x42	; 66
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	a9 01       	movw	r20, r18
 344:	ca 01       	movw	r24, r20
 346:	b9 01       	movw	r22, r18
 348:	29 d0       	rcall	.+82     	; 0x39c <rgb_Show>
	

	
	while (1)
	{
		b = matrix();
 34a:	07 d0       	rcall	.+14     	; 0x35a <matrix>
 34c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <b>
 350:	8a 30       	cpi	r24, 0x0A	; 10
		if (b <= 9)
 352:	d8 f7       	brcc	.-10     	; 0x34a <main+0x34>
 354:	80 68       	ori	r24, 0x80	; 128
		{
			PORTA = 0x80 | b;
 356:	8b bb       	out	0x1b, r24	; 27
 358:	f8 cf       	rjmp	.-16     	; 0x34a <main+0x34>

0000035a <matrix>:
// 0   1   2   3   4   5   6   7   8   9   *   # billentyuk
const unsigned char bill[12]={69, 14, 13, 11, 22, 21, 19, 38, 37, 35, 70, 67};

uint8_t matrix()
{
	uint8_t sor = 0x08;		// elso sor
 35a:	38 e0       	ldi	r19, 0x08	; 8
	uint8_t beolvas = 0;
	uint8_t i = 0;
	
	while (sor <= 0x40)
 35c:	1b c0       	rjmp	.+54     	; 0x394 <matrix+0x3a>
	{
		PORTC &= 0x80;
 35e:	85 b3       	in	r24, 0x15	; 21
 360:	80 78       	andi	r24, 0x80	; 128
 362:	85 bb       	out	0x15, r24	; 21
		PORTC |= sor;			// megcimezzuk a sort
 364:	85 b3       	in	r24, 0x15	; 21
 366:	83 2b       	or	r24, r19
 368:	85 bb       	out	0x15, r24	; 21
 36a:	8f e0       	ldi	r24, 0x0F	; 15
 36c:	97 e2       	ldi	r25, 0x27	; 39
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <matrix+0x14>
 372:	00 c0       	rjmp	.+0      	; 0x374 <matrix+0x1a>
 374:	00 00       	nop
		_delay_ms(5);
		
		beolvas = PINC & 0x7F;	// ne modositsa az RGB piros allpota.
 376:	23 b3       	in	r18, 0x13	; 19
 378:	2f 77       	andi	r18, 0x7F	; 127
		
		while(i < 12)
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	08 c0       	rjmp	.+16     	; 0x38e <matrix+0x34>
		{
			if (bill[i] == beolvas)
 37e:	e8 2f       	mov	r30, r24
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	e3 5e       	subi	r30, 0xE3	; 227
 384:	fe 4f       	sbci	r31, 0xFE	; 254
 386:	90 81       	ld	r25, Z
 388:	29 17       	cp	r18, r25
 38a:	39 f0       	breq	.+14     	; 0x39a <matrix+0x40>
			{
				return i;
			}
			i++;
 38c:	8f 5f       	subi	r24, 0xFF	; 255
		PORTC |= sor;			// megcimezzuk a sort
		_delay_ms(5);
		
		beolvas = PINC & 0x7F;	// ne modositsa az RGB piros allpota.
		
		while(i < 12)
 38e:	8c 30       	cpi	r24, 0x0C	; 12
 390:	b0 f3       	brcs	.-20     	; 0x37e <matrix+0x24>
				return i;
			}
			i++;
		}
		i = 0;
		sor<<=1;
 392:	33 0f       	add	r19, r19
{
	uint8_t sor = 0x08;		// elso sor
	uint8_t beolvas = 0;
	uint8_t i = 0;
	
	while (sor <= 0x40)
 394:	31 34       	cpi	r19, 0x41	; 65
 396:	18 f3       	brcs	.-58     	; 0x35e <matrix+0x4>
			i++;
		}
		i = 0;
		sor<<=1;
	}
	return 12;
 398:	8c e0       	ldi	r24, 0x0C	; 12
 39a:	08 95       	ret

0000039c <rgb_Show>:
// enable bit for PWM.		1 - enabled
uint8_t rgb_enable = 1;


void rgb_Show(float r, float g, float b, uint8_t brightness)
{
 39c:	4f 92       	push	r4
 39e:	5f 92       	push	r5
 3a0:	6f 92       	push	r6
 3a2:	7f 92       	push	r7
 3a4:	8f 92       	push	r8
 3a6:	9f 92       	push	r9
 3a8:	af 92       	push	r10
 3aa:	bf 92       	push	r11
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	00 d0       	rcall	.+0      	; 0x3be <rgb_Show+0x22>
 3be:	00 d0       	rcall	.+0      	; 0x3c0 <rgb_Show+0x24>
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
	float x = 100 / brightness;

	if(brightness != 0)
 3c4:	cc 20       	and	r12, r12
 3c6:	09 f4       	brne	.+2      	; 0x3ca <rgb_Show+0x2e>
 3c8:	3f c0       	rjmp	.+126    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 3ca:	e9 82       	std	Y+1, r14	; 0x01
 3cc:	fa 82       	std	Y+2, r15	; 0x02
 3ce:	0b 83       	std	Y+3, r16	; 0x03
 3d0:	1c 83       	std	Y+4, r17	; 0x04
 3d2:	49 01       	movw	r8, r18
 3d4:	5a 01       	movw	r10, r20
 3d6:	2b 01       	movw	r4, r22
 3d8:	3c 01       	movw	r6, r24
	{
		x = (100 / (float)brightness);
 3da:	6c 2d       	mov	r22, r12
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	f0 d1       	rcall	.+992    	; 0x7c4 <__floatunsisf>
 3e4:	9b 01       	movw	r18, r22
 3e6:	ac 01       	movw	r20, r24
 3e8:	60 e0       	ldi	r22, 0x00	; 0
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	88 ec       	ldi	r24, 0xC8	; 200
 3ee:	92 e4       	ldi	r25, 0x42	; 66
 3f0:	81 d1       	rcall	.+770    	; 0x6f4 <__divsf3>
 3f2:	6b 01       	movw	r12, r22
 3f4:	7c 01       	movw	r14, r24
		pwm_red = r / x;
 3f6:	9b 01       	movw	r18, r22
 3f8:	ac 01       	movw	r20, r24
 3fa:	c3 01       	movw	r24, r6
 3fc:	b2 01       	movw	r22, r4
 3fe:	7a d1       	rcall	.+756    	; 0x6f4 <__divsf3>
 400:	60 93 40 01 	sts	0x0140, r22	; 0x800140 <pwm_red>
 404:	70 93 41 01 	sts	0x0141, r23	; 0x800141 <pwm_red+0x1>
 408:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <pwm_red+0x2>
 40c:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <pwm_red+0x3>
		pwm_green = g / x;
 410:	a7 01       	movw	r20, r14
 412:	96 01       	movw	r18, r12
 414:	c5 01       	movw	r24, r10
 416:	b4 01       	movw	r22, r8
 418:	6d d1       	rcall	.+730    	; 0x6f4 <__divsf3>
 41a:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <pwm_green>
 41e:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <pwm_green+0x1>
 422:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <pwm_green+0x2>
 426:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <pwm_green+0x3>
		pwm_blue = b / x;
 42a:	a7 01       	movw	r20, r14
 42c:	96 01       	movw	r18, r12
 42e:	69 81       	ldd	r22, Y+1	; 0x01
 430:	7a 81       	ldd	r23, Y+2	; 0x02
 432:	8b 81       	ldd	r24, Y+3	; 0x03
 434:	9c 81       	ldd	r25, Y+4	; 0x04
 436:	5e d1       	rcall	.+700    	; 0x6f4 <__divsf3>
 438:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <pwm_blue>
 43c:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <pwm_blue+0x1>
 440:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <pwm_blue+0x2>
 444:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <pwm_blue+0x3>
	}
}
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	0f 90       	pop	r0
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	ff 90       	pop	r15
 45a:	ef 90       	pop	r14
 45c:	df 90       	pop	r13
 45e:	cf 90       	pop	r12
 460:	bf 90       	pop	r11
 462:	af 90       	pop	r10
 464:	9f 90       	pop	r9
 466:	8f 90       	pop	r8
 468:	7f 90       	pop	r7
 46a:	6f 90       	pop	r6
 46c:	5f 90       	pop	r5
 46e:	4f 90       	pop	r4
 470:	08 95       	ret

00000472 <rgb_pwm_handling>:


void rgb_pwm_handling()
{
 472:	cf 92       	push	r12
 474:	df 92       	push	r13
 476:	ef 92       	push	r14
 478:	ff 92       	push	r15
	if (rgb_enable)
 47a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 47e:	88 23       	and	r24, r24
 480:	09 f4       	brne	.+2      	; 0x484 <rgb_pwm_handling+0x12>
 482:	ce c0       	rjmp	.+412    	; 0x620 <rgb_pwm_handling+0x1ae>
	{
		h_red++;
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	40 e8       	ldi	r20, 0x80	; 128
 48a:	5f e3       	ldi	r21, 0x3F	; 63
 48c:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <h_red>
 490:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <h_red+0x1>
 494:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <h_red+0x2>
 498:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <h_red+0x3>
 49c:	c7 d0       	rcall	.+398    	; 0x62c <__addsf3>
 49e:	6b 01       	movw	r12, r22
 4a0:	7c 01       	movw	r14, r24
 4a2:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <h_red>
 4a6:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <h_red+0x1>
 4aa:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <h_red+0x2>
 4ae:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <h_red+0x3>
		h_green++;
 4b2:	20 e0       	ldi	r18, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	40 e8       	ldi	r20, 0x80	; 128
 4b8:	5f e3       	ldi	r21, 0x3F	; 63
 4ba:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <h_green>
 4be:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <h_green+0x1>
 4c2:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <h_green+0x2>
 4c6:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <h_green+0x3>
 4ca:	b0 d0       	rcall	.+352    	; 0x62c <__addsf3>
 4cc:	60 93 34 01 	sts	0x0134, r22	; 0x800134 <h_green>
 4d0:	70 93 35 01 	sts	0x0135, r23	; 0x800135 <h_green+0x1>
 4d4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <h_green+0x2>
 4d8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <h_green+0x3>
		h_blue++;
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	40 e8       	ldi	r20, 0x80	; 128
 4e2:	5f e3       	ldi	r21, 0x3F	; 63
 4e4:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <h_blue>
 4e8:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <h_blue+0x1>
 4ec:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <h_blue+0x2>
 4f0:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <h_blue+0x3>
 4f4:	9b d0       	rcall	.+310    	; 0x62c <__addsf3>
 4f6:	60 93 2c 01 	sts	0x012C, r22	; 0x80012c <h_blue>
 4fa:	70 93 2d 01 	sts	0x012D, r23	; 0x80012d <h_blue+0x1>
 4fe:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <h_blue+0x2>
 502:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <h_blue+0x3>
		
		// Switching the RED led with PWM
		if (h_red >= pwm_red)
 506:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <pwm_red>
 50a:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <pwm_red+0x1>
 50e:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <pwm_red+0x2>
 512:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <pwm_red+0x3>
 516:	c7 01       	movw	r24, r14
 518:	b6 01       	movw	r22, r12
 51a:	e2 d1       	rcall	.+964    	; 0x8e0 <__gesf2>
 51c:	88 23       	and	r24, r24
 51e:	dc f0       	brlt	.+54     	; 0x556 <rgb_pwm_handling+0xe4>
		{
			PORTC &= ~(1<<PC7);
 520:	85 b3       	in	r24, 0x15	; 21
 522:	8f 77       	andi	r24, 0x7F	; 127
 524:	85 bb       	out	0x15, r24	; 21
			if (h_red >= 100)
 526:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <h_red>
 52a:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <h_red+0x1>
 52e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <h_red+0x2>
 532:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <h_red+0x3>
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	48 ec       	ldi	r20, 0xC8	; 200
 53c:	52 e4       	ldi	r21, 0x42	; 66
 53e:	d0 d1       	rcall	.+928    	; 0x8e0 <__gesf2>
 540:	88 23       	and	r24, r24
 542:	64 f0       	brlt	.+24     	; 0x55c <rgb_pwm_handling+0xea>
			h_red = 0;
 544:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <h_red>
 548:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <h_red+0x1>
 54c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <h_red+0x2>
 550:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <h_red+0x3>
 554:	03 c0       	rjmp	.+6      	; 0x55c <rgb_pwm_handling+0xea>
		}
		else
		{
			PORTC |= (1<<PC7);
 556:	85 b3       	in	r24, 0x15	; 21
 558:	80 68       	ori	r24, 0x80	; 128
 55a:	85 bb       	out	0x15, r24	; 21
		}
		
		// Switching the GREEN led with PWM
		if (h_green >= pwm_green)
 55c:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <h_green>
 560:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <h_green+0x1>
 564:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <h_green+0x2>
 568:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <h_green+0x3>
 56c:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <pwm_green>
 570:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <pwm_green+0x1>
 574:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <pwm_green+0x2>
 578:	50 91 3b 01 	lds	r21, 0x013B	; 0x80013b <pwm_green+0x3>
 57c:	b1 d1       	rcall	.+866    	; 0x8e0 <__gesf2>
 57e:	88 23       	and	r24, r24
 580:	dc f0       	brlt	.+54     	; 0x5b8 <rgb_pwm_handling+0x146>
		{
			PORTE &=~ (1<<PE2);
 582:	83 b1       	in	r24, 0x03	; 3
 584:	8b 7f       	andi	r24, 0xFB	; 251
 586:	83 b9       	out	0x03, r24	; 3
			if (h_green >= 100)
 588:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <h_green>
 58c:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <h_green+0x1>
 590:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <h_green+0x2>
 594:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <h_green+0x3>
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	48 ec       	ldi	r20, 0xC8	; 200
 59e:	52 e4       	ldi	r21, 0x42	; 66
 5a0:	9f d1       	rcall	.+830    	; 0x8e0 <__gesf2>
 5a2:	88 23       	and	r24, r24
 5a4:	64 f0       	brlt	.+24     	; 0x5be <rgb_pwm_handling+0x14c>
			h_green = 0;
 5a6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <h_green>
 5aa:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <h_green+0x1>
 5ae:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <h_green+0x2>
 5b2:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <h_green+0x3>
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <rgb_pwm_handling+0x14c>
		}
		else
		{
			PORTE |= (1<<PE2);
 5b8:	83 b1       	in	r24, 0x03	; 3
 5ba:	84 60       	ori	r24, 0x04	; 4
 5bc:	83 b9       	out	0x03, r24	; 3
		}
		
		// Switching the BLUE led with PWM
		if (h_blue >= pwm_blue)
 5be:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <h_blue>
 5c2:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <h_blue+0x1>
 5c6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <h_blue+0x2>
 5ca:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <h_blue+0x3>
 5ce:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <pwm_blue>
 5d2:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <pwm_blue+0x1>
 5d6:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <pwm_blue+0x2>
 5da:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <pwm_blue+0x3>
 5de:	80 d1       	rcall	.+768    	; 0x8e0 <__gesf2>
 5e0:	88 23       	and	r24, r24
 5e2:	dc f0       	brlt	.+54     	; 0x61a <rgb_pwm_handling+0x1a8>
		{
			PORTE &=~ (1<<PE3);
 5e4:	83 b1       	in	r24, 0x03	; 3
 5e6:	87 7f       	andi	r24, 0xF7	; 247
 5e8:	83 b9       	out	0x03, r24	; 3
			if (h_blue >= 100)
 5ea:	60 91 2c 01 	lds	r22, 0x012C	; 0x80012c <h_blue>
 5ee:	70 91 2d 01 	lds	r23, 0x012D	; 0x80012d <h_blue+0x1>
 5f2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <h_blue+0x2>
 5f6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <h_blue+0x3>
 5fa:	20 e0       	ldi	r18, 0x00	; 0
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	48 ec       	ldi	r20, 0xC8	; 200
 600:	52 e4       	ldi	r21, 0x42	; 66
 602:	6e d1       	rcall	.+732    	; 0x8e0 <__gesf2>
 604:	88 23       	and	r24, r24
 606:	64 f0       	brlt	.+24     	; 0x620 <rgb_pwm_handling+0x1ae>
			h_blue = 0;
 608:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <h_blue>
 60c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <h_blue+0x1>
 610:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <h_blue+0x2>
 614:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <h_blue+0x3>
 618:	03 c0       	rjmp	.+6      	; 0x620 <rgb_pwm_handling+0x1ae>
		}
		else
		{
			PORTE |= (1<<PE3);
 61a:	83 b1       	in	r24, 0x03	; 3
 61c:	88 60       	ori	r24, 0x08	; 8
 61e:	83 b9       	out	0x03, r24	; 3
		}
	}
}
 620:	ff 90       	pop	r15
 622:	ef 90       	pop	r14
 624:	df 90       	pop	r13
 626:	cf 90       	pop	r12
 628:	08 95       	ret

0000062a <__subsf3>:
 62a:	50 58       	subi	r21, 0x80	; 128

0000062c <__addsf3>:
 62c:	bb 27       	eor	r27, r27
 62e:	aa 27       	eor	r26, r26
 630:	0e d0       	rcall	.+28     	; 0x64e <__addsf3x>
 632:	1c c1       	rjmp	.+568    	; 0x86c <__fp_round>
 634:	0d d1       	rcall	.+538    	; 0x850 <__fp_pscA>
 636:	30 f0       	brcs	.+12     	; 0x644 <__addsf3+0x18>
 638:	12 d1       	rcall	.+548    	; 0x85e <__fp_pscB>
 63a:	20 f0       	brcs	.+8      	; 0x644 <__addsf3+0x18>
 63c:	31 f4       	brne	.+12     	; 0x64a <__addsf3+0x1e>
 63e:	9f 3f       	cpi	r25, 0xFF	; 255
 640:	11 f4       	brne	.+4      	; 0x646 <__addsf3+0x1a>
 642:	1e f4       	brtc	.+6      	; 0x64a <__addsf3+0x1e>
 644:	02 c1       	rjmp	.+516    	; 0x84a <__fp_nan>
 646:	0e f4       	brtc	.+2      	; 0x64a <__addsf3+0x1e>
 648:	e0 95       	com	r30
 64a:	e7 fb       	bst	r30, 7
 64c:	f8 c0       	rjmp	.+496    	; 0x83e <__fp_inf>

0000064e <__addsf3x>:
 64e:	e9 2f       	mov	r30, r25
 650:	1e d1       	rcall	.+572    	; 0x88e <__fp_split3>
 652:	80 f3       	brcs	.-32     	; 0x634 <__addsf3+0x8>
 654:	ba 17       	cp	r27, r26
 656:	62 07       	cpc	r22, r18
 658:	73 07       	cpc	r23, r19
 65a:	84 07       	cpc	r24, r20
 65c:	95 07       	cpc	r25, r21
 65e:	18 f0       	brcs	.+6      	; 0x666 <__addsf3x+0x18>
 660:	71 f4       	brne	.+28     	; 0x67e <__addsf3x+0x30>
 662:	9e f5       	brtc	.+102    	; 0x6ca <__addsf3x+0x7c>
 664:	36 c1       	rjmp	.+620    	; 0x8d2 <__fp_zero>
 666:	0e f4       	brtc	.+2      	; 0x66a <__addsf3x+0x1c>
 668:	e0 95       	com	r30
 66a:	0b 2e       	mov	r0, r27
 66c:	ba 2f       	mov	r27, r26
 66e:	a0 2d       	mov	r26, r0
 670:	0b 01       	movw	r0, r22
 672:	b9 01       	movw	r22, r18
 674:	90 01       	movw	r18, r0
 676:	0c 01       	movw	r0, r24
 678:	ca 01       	movw	r24, r20
 67a:	a0 01       	movw	r20, r0
 67c:	11 24       	eor	r1, r1
 67e:	ff 27       	eor	r31, r31
 680:	59 1b       	sub	r21, r25
 682:	99 f0       	breq	.+38     	; 0x6aa <__addsf3x+0x5c>
 684:	59 3f       	cpi	r21, 0xF9	; 249
 686:	50 f4       	brcc	.+20     	; 0x69c <__addsf3x+0x4e>
 688:	50 3e       	cpi	r21, 0xE0	; 224
 68a:	68 f1       	brcs	.+90     	; 0x6e6 <__addsf3x+0x98>
 68c:	1a 16       	cp	r1, r26
 68e:	f0 40       	sbci	r31, 0x00	; 0
 690:	a2 2f       	mov	r26, r18
 692:	23 2f       	mov	r18, r19
 694:	34 2f       	mov	r19, r20
 696:	44 27       	eor	r20, r20
 698:	58 5f       	subi	r21, 0xF8	; 248
 69a:	f3 cf       	rjmp	.-26     	; 0x682 <__addsf3x+0x34>
 69c:	46 95       	lsr	r20
 69e:	37 95       	ror	r19
 6a0:	27 95       	ror	r18
 6a2:	a7 95       	ror	r26
 6a4:	f0 40       	sbci	r31, 0x00	; 0
 6a6:	53 95       	inc	r21
 6a8:	c9 f7       	brne	.-14     	; 0x69c <__addsf3x+0x4e>
 6aa:	7e f4       	brtc	.+30     	; 0x6ca <__addsf3x+0x7c>
 6ac:	1f 16       	cp	r1, r31
 6ae:	ba 0b       	sbc	r27, r26
 6b0:	62 0b       	sbc	r22, r18
 6b2:	73 0b       	sbc	r23, r19
 6b4:	84 0b       	sbc	r24, r20
 6b6:	ba f0       	brmi	.+46     	; 0x6e6 <__addsf3x+0x98>
 6b8:	91 50       	subi	r25, 0x01	; 1
 6ba:	a1 f0       	breq	.+40     	; 0x6e4 <__addsf3x+0x96>
 6bc:	ff 0f       	add	r31, r31
 6be:	bb 1f       	adc	r27, r27
 6c0:	66 1f       	adc	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	c2 f7       	brpl	.-16     	; 0x6b8 <__addsf3x+0x6a>
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <__addsf3x+0x98>
 6ca:	ba 0f       	add	r27, r26
 6cc:	62 1f       	adc	r22, r18
 6ce:	73 1f       	adc	r23, r19
 6d0:	84 1f       	adc	r24, r20
 6d2:	48 f4       	brcc	.+18     	; 0x6e6 <__addsf3x+0x98>
 6d4:	87 95       	ror	r24
 6d6:	77 95       	ror	r23
 6d8:	67 95       	ror	r22
 6da:	b7 95       	ror	r27
 6dc:	f7 95       	ror	r31
 6de:	9e 3f       	cpi	r25, 0xFE	; 254
 6e0:	08 f0       	brcs	.+2      	; 0x6e4 <__addsf3x+0x96>
 6e2:	b3 cf       	rjmp	.-154    	; 0x64a <__addsf3+0x1e>
 6e4:	93 95       	inc	r25
 6e6:	88 0f       	add	r24, r24
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <__addsf3x+0x9e>
 6ea:	99 27       	eor	r25, r25
 6ec:	ee 0f       	add	r30, r30
 6ee:	97 95       	ror	r25
 6f0:	87 95       	ror	r24
 6f2:	08 95       	ret

000006f4 <__divsf3>:
 6f4:	0c d0       	rcall	.+24     	; 0x70e <__divsf3x>
 6f6:	ba c0       	rjmp	.+372    	; 0x86c <__fp_round>
 6f8:	b2 d0       	rcall	.+356    	; 0x85e <__fp_pscB>
 6fa:	40 f0       	brcs	.+16     	; 0x70c <__divsf3+0x18>
 6fc:	a9 d0       	rcall	.+338    	; 0x850 <__fp_pscA>
 6fe:	30 f0       	brcs	.+12     	; 0x70c <__divsf3+0x18>
 700:	21 f4       	brne	.+8      	; 0x70a <__divsf3+0x16>
 702:	5f 3f       	cpi	r21, 0xFF	; 255
 704:	19 f0       	breq	.+6      	; 0x70c <__divsf3+0x18>
 706:	9b c0       	rjmp	.+310    	; 0x83e <__fp_inf>
 708:	51 11       	cpse	r21, r1
 70a:	e4 c0       	rjmp	.+456    	; 0x8d4 <__fp_szero>
 70c:	9e c0       	rjmp	.+316    	; 0x84a <__fp_nan>

0000070e <__divsf3x>:
 70e:	bf d0       	rcall	.+382    	; 0x88e <__fp_split3>
 710:	98 f3       	brcs	.-26     	; 0x6f8 <__divsf3+0x4>

00000712 <__divsf3_pse>:
 712:	99 23       	and	r25, r25
 714:	c9 f3       	breq	.-14     	; 0x708 <__divsf3+0x14>
 716:	55 23       	and	r21, r21
 718:	b1 f3       	breq	.-20     	; 0x706 <__divsf3+0x12>
 71a:	95 1b       	sub	r25, r21
 71c:	55 0b       	sbc	r21, r21
 71e:	bb 27       	eor	r27, r27
 720:	aa 27       	eor	r26, r26
 722:	62 17       	cp	r22, r18
 724:	73 07       	cpc	r23, r19
 726:	84 07       	cpc	r24, r20
 728:	38 f0       	brcs	.+14     	; 0x738 <__divsf3_pse+0x26>
 72a:	9f 5f       	subi	r25, 0xFF	; 255
 72c:	5f 4f       	sbci	r21, 0xFF	; 255
 72e:	22 0f       	add	r18, r18
 730:	33 1f       	adc	r19, r19
 732:	44 1f       	adc	r20, r20
 734:	aa 1f       	adc	r26, r26
 736:	a9 f3       	breq	.-22     	; 0x722 <__divsf3_pse+0x10>
 738:	33 d0       	rcall	.+102    	; 0x7a0 <__divsf3_pse+0x8e>
 73a:	0e 2e       	mov	r0, r30
 73c:	3a f0       	brmi	.+14     	; 0x74c <__divsf3_pse+0x3a>
 73e:	e0 e8       	ldi	r30, 0x80	; 128
 740:	30 d0       	rcall	.+96     	; 0x7a2 <__divsf3_pse+0x90>
 742:	91 50       	subi	r25, 0x01	; 1
 744:	50 40       	sbci	r21, 0x00	; 0
 746:	e6 95       	lsr	r30
 748:	00 1c       	adc	r0, r0
 74a:	ca f7       	brpl	.-14     	; 0x73e <__divsf3_pse+0x2c>
 74c:	29 d0       	rcall	.+82     	; 0x7a0 <__divsf3_pse+0x8e>
 74e:	fe 2f       	mov	r31, r30
 750:	27 d0       	rcall	.+78     	; 0x7a0 <__divsf3_pse+0x8e>
 752:	66 0f       	add	r22, r22
 754:	77 1f       	adc	r23, r23
 756:	88 1f       	adc	r24, r24
 758:	bb 1f       	adc	r27, r27
 75a:	26 17       	cp	r18, r22
 75c:	37 07       	cpc	r19, r23
 75e:	48 07       	cpc	r20, r24
 760:	ab 07       	cpc	r26, r27
 762:	b0 e8       	ldi	r27, 0x80	; 128
 764:	09 f0       	breq	.+2      	; 0x768 <__divsf3_pse+0x56>
 766:	bb 0b       	sbc	r27, r27
 768:	80 2d       	mov	r24, r0
 76a:	bf 01       	movw	r22, r30
 76c:	ff 27       	eor	r31, r31
 76e:	93 58       	subi	r25, 0x83	; 131
 770:	5f 4f       	sbci	r21, 0xFF	; 255
 772:	2a f0       	brmi	.+10     	; 0x77e <__divsf3_pse+0x6c>
 774:	9e 3f       	cpi	r25, 0xFE	; 254
 776:	51 05       	cpc	r21, r1
 778:	68 f0       	brcs	.+26     	; 0x794 <__divsf3_pse+0x82>
 77a:	61 c0       	rjmp	.+194    	; 0x83e <__fp_inf>
 77c:	ab c0       	rjmp	.+342    	; 0x8d4 <__fp_szero>
 77e:	5f 3f       	cpi	r21, 0xFF	; 255
 780:	ec f3       	brlt	.-6      	; 0x77c <__divsf3_pse+0x6a>
 782:	98 3e       	cpi	r25, 0xE8	; 232
 784:	dc f3       	brlt	.-10     	; 0x77c <__divsf3_pse+0x6a>
 786:	86 95       	lsr	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b7 95       	ror	r27
 78e:	f7 95       	ror	r31
 790:	9f 5f       	subi	r25, 0xFF	; 255
 792:	c9 f7       	brne	.-14     	; 0x786 <__divsf3_pse+0x74>
 794:	88 0f       	add	r24, r24
 796:	91 1d       	adc	r25, r1
 798:	96 95       	lsr	r25
 79a:	87 95       	ror	r24
 79c:	97 f9       	bld	r25, 7
 79e:	08 95       	ret
 7a0:	e1 e0       	ldi	r30, 0x01	; 1
 7a2:	66 0f       	add	r22, r22
 7a4:	77 1f       	adc	r23, r23
 7a6:	88 1f       	adc	r24, r24
 7a8:	bb 1f       	adc	r27, r27
 7aa:	62 17       	cp	r22, r18
 7ac:	73 07       	cpc	r23, r19
 7ae:	84 07       	cpc	r24, r20
 7b0:	ba 07       	cpc	r27, r26
 7b2:	20 f0       	brcs	.+8      	; 0x7bc <__divsf3_pse+0xaa>
 7b4:	62 1b       	sub	r22, r18
 7b6:	73 0b       	sbc	r23, r19
 7b8:	84 0b       	sbc	r24, r20
 7ba:	ba 0b       	sbc	r27, r26
 7bc:	ee 1f       	adc	r30, r30
 7be:	88 f7       	brcc	.-30     	; 0x7a2 <__divsf3_pse+0x90>
 7c0:	e0 95       	com	r30
 7c2:	08 95       	ret

000007c4 <__floatunsisf>:
 7c4:	e8 94       	clt
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <__floatsisf+0x12>

000007c8 <__floatsisf>:
 7c8:	97 fb       	bst	r25, 7
 7ca:	3e f4       	brtc	.+14     	; 0x7da <__floatsisf+0x12>
 7cc:	90 95       	com	r25
 7ce:	80 95       	com	r24
 7d0:	70 95       	com	r23
 7d2:	61 95       	neg	r22
 7d4:	7f 4f       	sbci	r23, 0xFF	; 255
 7d6:	8f 4f       	sbci	r24, 0xFF	; 255
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	99 23       	and	r25, r25
 7dc:	a9 f0       	breq	.+42     	; 0x808 <__floatsisf+0x40>
 7de:	f9 2f       	mov	r31, r25
 7e0:	96 e9       	ldi	r25, 0x96	; 150
 7e2:	bb 27       	eor	r27, r27
 7e4:	93 95       	inc	r25
 7e6:	f6 95       	lsr	r31
 7e8:	87 95       	ror	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b7 95       	ror	r27
 7f0:	f1 11       	cpse	r31, r1
 7f2:	f8 cf       	rjmp	.-16     	; 0x7e4 <__floatsisf+0x1c>
 7f4:	fa f4       	brpl	.+62     	; 0x834 <__floatsisf+0x6c>
 7f6:	bb 0f       	add	r27, r27
 7f8:	11 f4       	brne	.+4      	; 0x7fe <__floatsisf+0x36>
 7fa:	60 ff       	sbrs	r22, 0
 7fc:	1b c0       	rjmp	.+54     	; 0x834 <__floatsisf+0x6c>
 7fe:	6f 5f       	subi	r22, 0xFF	; 255
 800:	7f 4f       	sbci	r23, 0xFF	; 255
 802:	8f 4f       	sbci	r24, 0xFF	; 255
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	16 c0       	rjmp	.+44     	; 0x834 <__floatsisf+0x6c>
 808:	88 23       	and	r24, r24
 80a:	11 f0       	breq	.+4      	; 0x810 <__floatsisf+0x48>
 80c:	96 e9       	ldi	r25, 0x96	; 150
 80e:	11 c0       	rjmp	.+34     	; 0x832 <__floatsisf+0x6a>
 810:	77 23       	and	r23, r23
 812:	21 f0       	breq	.+8      	; 0x81c <__floatsisf+0x54>
 814:	9e e8       	ldi	r25, 0x8E	; 142
 816:	87 2f       	mov	r24, r23
 818:	76 2f       	mov	r23, r22
 81a:	05 c0       	rjmp	.+10     	; 0x826 <__floatsisf+0x5e>
 81c:	66 23       	and	r22, r22
 81e:	71 f0       	breq	.+28     	; 0x83c <__floatsisf+0x74>
 820:	96 e8       	ldi	r25, 0x86	; 134
 822:	86 2f       	mov	r24, r22
 824:	70 e0       	ldi	r23, 0x00	; 0
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	2a f0       	brmi	.+10     	; 0x834 <__floatsisf+0x6c>
 82a:	9a 95       	dec	r25
 82c:	66 0f       	add	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	da f7       	brpl	.-10     	; 0x82a <__floatsisf+0x62>
 834:	88 0f       	add	r24, r24
 836:	96 95       	lsr	r25
 838:	87 95       	ror	r24
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret

0000083e <__fp_inf>:
 83e:	97 f9       	bld	r25, 7
 840:	9f 67       	ori	r25, 0x7F	; 127
 842:	80 e8       	ldi	r24, 0x80	; 128
 844:	70 e0       	ldi	r23, 0x00	; 0
 846:	60 e0       	ldi	r22, 0x00	; 0
 848:	08 95       	ret

0000084a <__fp_nan>:
 84a:	9f ef       	ldi	r25, 0xFF	; 255
 84c:	80 ec       	ldi	r24, 0xC0	; 192
 84e:	08 95       	ret

00000850 <__fp_pscA>:
 850:	00 24       	eor	r0, r0
 852:	0a 94       	dec	r0
 854:	16 16       	cp	r1, r22
 856:	17 06       	cpc	r1, r23
 858:	18 06       	cpc	r1, r24
 85a:	09 06       	cpc	r0, r25
 85c:	08 95       	ret

0000085e <__fp_pscB>:
 85e:	00 24       	eor	r0, r0
 860:	0a 94       	dec	r0
 862:	12 16       	cp	r1, r18
 864:	13 06       	cpc	r1, r19
 866:	14 06       	cpc	r1, r20
 868:	05 06       	cpc	r0, r21
 86a:	08 95       	ret

0000086c <__fp_round>:
 86c:	09 2e       	mov	r0, r25
 86e:	03 94       	inc	r0
 870:	00 0c       	add	r0, r0
 872:	11 f4       	brne	.+4      	; 0x878 <__fp_round+0xc>
 874:	88 23       	and	r24, r24
 876:	52 f0       	brmi	.+20     	; 0x88c <__fp_round+0x20>
 878:	bb 0f       	add	r27, r27
 87a:	40 f4       	brcc	.+16     	; 0x88c <__fp_round+0x20>
 87c:	bf 2b       	or	r27, r31
 87e:	11 f4       	brne	.+4      	; 0x884 <__fp_round+0x18>
 880:	60 ff       	sbrs	r22, 0
 882:	04 c0       	rjmp	.+8      	; 0x88c <__fp_round+0x20>
 884:	6f 5f       	subi	r22, 0xFF	; 255
 886:	7f 4f       	sbci	r23, 0xFF	; 255
 888:	8f 4f       	sbci	r24, 0xFF	; 255
 88a:	9f 4f       	sbci	r25, 0xFF	; 255
 88c:	08 95       	ret

0000088e <__fp_split3>:
 88e:	57 fd       	sbrc	r21, 7
 890:	90 58       	subi	r25, 0x80	; 128
 892:	44 0f       	add	r20, r20
 894:	55 1f       	adc	r21, r21
 896:	59 f0       	breq	.+22     	; 0x8ae <__fp_splitA+0x10>
 898:	5f 3f       	cpi	r21, 0xFF	; 255
 89a:	71 f0       	breq	.+28     	; 0x8b8 <__fp_splitA+0x1a>
 89c:	47 95       	ror	r20

0000089e <__fp_splitA>:
 89e:	88 0f       	add	r24, r24
 8a0:	97 fb       	bst	r25, 7
 8a2:	99 1f       	adc	r25, r25
 8a4:	61 f0       	breq	.+24     	; 0x8be <__fp_splitA+0x20>
 8a6:	9f 3f       	cpi	r25, 0xFF	; 255
 8a8:	79 f0       	breq	.+30     	; 0x8c8 <__fp_splitA+0x2a>
 8aa:	87 95       	ror	r24
 8ac:	08 95       	ret
 8ae:	12 16       	cp	r1, r18
 8b0:	13 06       	cpc	r1, r19
 8b2:	14 06       	cpc	r1, r20
 8b4:	55 1f       	adc	r21, r21
 8b6:	f2 cf       	rjmp	.-28     	; 0x89c <__fp_split3+0xe>
 8b8:	46 95       	lsr	r20
 8ba:	f1 df       	rcall	.-30     	; 0x89e <__fp_splitA>
 8bc:	08 c0       	rjmp	.+16     	; 0x8ce <__fp_splitA+0x30>
 8be:	16 16       	cp	r1, r22
 8c0:	17 06       	cpc	r1, r23
 8c2:	18 06       	cpc	r1, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	f1 cf       	rjmp	.-30     	; 0x8aa <__fp_splitA+0xc>
 8c8:	86 95       	lsr	r24
 8ca:	71 05       	cpc	r23, r1
 8cc:	61 05       	cpc	r22, r1
 8ce:	08 94       	sec
 8d0:	08 95       	ret

000008d2 <__fp_zero>:
 8d2:	e8 94       	clt

000008d4 <__fp_szero>:
 8d4:	bb 27       	eor	r27, r27
 8d6:	66 27       	eor	r22, r22
 8d8:	77 27       	eor	r23, r23
 8da:	cb 01       	movw	r24, r22
 8dc:	97 f9       	bld	r25, 7
 8de:	08 95       	ret

000008e0 <__gesf2>:
 8e0:	03 d0       	rcall	.+6      	; 0x8e8 <__fp_cmp>
 8e2:	08 f4       	brcc	.+2      	; 0x8e6 <__gesf2+0x6>
 8e4:	8f ef       	ldi	r24, 0xFF	; 255
 8e6:	08 95       	ret

000008e8 <__fp_cmp>:
 8e8:	99 0f       	add	r25, r25
 8ea:	00 08       	sbc	r0, r0
 8ec:	55 0f       	add	r21, r21
 8ee:	aa 0b       	sbc	r26, r26
 8f0:	e0 e8       	ldi	r30, 0x80	; 128
 8f2:	fe ef       	ldi	r31, 0xFE	; 254
 8f4:	16 16       	cp	r1, r22
 8f6:	17 06       	cpc	r1, r23
 8f8:	e8 07       	cpc	r30, r24
 8fa:	f9 07       	cpc	r31, r25
 8fc:	c0 f0       	brcs	.+48     	; 0x92e <__fp_cmp+0x46>
 8fe:	12 16       	cp	r1, r18
 900:	13 06       	cpc	r1, r19
 902:	e4 07       	cpc	r30, r20
 904:	f5 07       	cpc	r31, r21
 906:	98 f0       	brcs	.+38     	; 0x92e <__fp_cmp+0x46>
 908:	62 1b       	sub	r22, r18
 90a:	73 0b       	sbc	r23, r19
 90c:	84 0b       	sbc	r24, r20
 90e:	95 0b       	sbc	r25, r21
 910:	39 f4       	brne	.+14     	; 0x920 <__fp_cmp+0x38>
 912:	0a 26       	eor	r0, r26
 914:	61 f0       	breq	.+24     	; 0x92e <__fp_cmp+0x46>
 916:	23 2b       	or	r18, r19
 918:	24 2b       	or	r18, r20
 91a:	25 2b       	or	r18, r21
 91c:	21 f4       	brne	.+8      	; 0x926 <__fp_cmp+0x3e>
 91e:	08 95       	ret
 920:	0a 26       	eor	r0, r26
 922:	09 f4       	brne	.+2      	; 0x926 <__fp_cmp+0x3e>
 924:	a1 40       	sbci	r26, 0x01	; 1
 926:	a6 95       	lsr	r26
 928:	8f ef       	ldi	r24, 0xFF	; 255
 92a:	81 1d       	adc	r24, r1
 92c:	81 1d       	adc	r24, r1
 92e:	08 95       	ret

00000930 <_exit>:
 930:	f8 94       	cli

00000932 <__stop_program>:
 932:	ff cf       	rjmp	.-2      	; 0x932 <__stop_program>
