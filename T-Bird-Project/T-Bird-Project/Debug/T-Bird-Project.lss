
T-Bird-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a46  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088b  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000457  00000000  00000000  000015e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000489  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017b  00000000  00000000  00001f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4a d0       	rcall	.+148    	; 0x148 <main>
  b4:	80 c0       	rjmp	.+256    	; 0x1b6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <waitMs1>:
	else
	{
		if (leds == 0x01)
		irany = 0x01;
		else
		leds = leds >> 1;
  b8:	8f ec       	ldi	r24, 0xCF	; 207
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <waitMs1+0x4>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <waitMs1+0xa>
  c2:	00 00       	nop
  c4:	08 95       	ret

000000c6 <waitMs>:
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <waitMs+0xa>
  cc:	f5 df       	rcall	.-22     	; 0xb8 <waitMs1>
  ce:	ce 01       	movw	r24, r28
  d0:	ec 01       	movw	r28, r24
  d2:	21 97       	sbiw	r28, 0x01	; 1
  d4:	18 16       	cp	r1, r24
  d6:	19 06       	cpc	r1, r25
  d8:	cc f3       	brlt	.-14     	; 0xcc <waitMs+0x6>
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <rgbLed>:
  e0:	84 b3       	in	r24, 0x14	; 20
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	82 b1       	in	r24, 0x02	; 2
  e8:	8c 60       	ori	r24, 0x0C	; 12
  ea:	82 b9       	out	0x02, r24	; 2
  ec:	88 e8       	ldi	r24, 0x88	; 136
  ee:	85 bb       	out	0x15, r24	; 21
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	83 b9       	out	0x03, r24	; 3
  f4:	08 95       	ret

000000f6 <port_inti>:
  f6:	80 ef       	ldi	r24, 0xF0	; 240
  f8:	87 bb       	out	0x17, r24	; 23
  fa:	81 bb       	out	0x11, r24	; 17
  fc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
 100:	08 95       	ret

00000102 <ledOut>:
 102:	82 bb       	out	0x12, r24	; 18
 104:	82 95       	swap	r24
 106:	80 7f       	andi	r24, 0xF0	; 240
 108:	88 bb       	out	0x18, r24	; 24
 10a:	08 95       	ret

0000010c <knight_rider>:
}

void knight_rider()
{
	// balra fut
	if (leds1 == 0x80)
 10c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <leds1>
 110:	80 38       	cpi	r24, 0x80	; 128
 112:	21 f4       	brne	.+8      	; 0x11c <knight_rider+0x10>
	{
		leds1 = 0x01;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <leds1>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <knight_rider+0x16>
	}
	else
	{
		leds1 = leds1 << 1;
 11c:	88 0f       	add	r24, r24
 11e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <leds1>
	}

	// jobbra fut
	if (leds2 == 0x01)
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <leds2>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	21 f4       	brne	.+8      	; 0x132 <knight_rider+0x26>
	{
		leds2 = 0x80;
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <leds2>
 130:	03 c0       	rjmp	.+6      	; 0x138 <knight_rider+0x2c>
	}
	else
	{
		leds2 = leds2 >> 1;
 132:	86 95       	lsr	r24
 134:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <leds2>
	}

	leds = leds1 | leds2;
 138:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <leds1>
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <leds2>
 140:	89 2b       	or	r24, r25
 142:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <leds>
 146:	08 95       	ret

00000148 <main>:

int d = 500; // base delay time number

int main(void)
{
	port_inti();
 148:	d6 df       	rcall	.-84     	; 0xf6 <port_inti>
	rgbLed();
 14a:	ca df       	rcall	.-108    	; 0xe0 <rgbLed>
 14c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
	
	while (1)
	{
		if (PING == 0x02) // if the 2. button is pressed increase by 100
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	91 f4       	brne	.+36     	; 0x178 <main+0x30>
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			d += 50;
 158:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 15c:	c2 96       	adiw	r24, 0x32	; 50
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 166:	81 31       	cpi	r24, 0x11	; 17
			if (d > 10000) // delay protection
 168:	97 42       	sbci	r25, 0x27	; 39
 16a:	34 f0       	brlt	.+12     	; 0x178 <main+0x30>
 16c:	80 e1       	ldi	r24, 0x10	; 16
				d = 10000;
 16e:	97 e2       	ldi	r25, 0x27	; 39
 170:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 178:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
		}
		if (PING == 0x01) // if the 1. button is pressed decrease by 100
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	89 f4       	brne	.+34     	; 0x1a2 <main+0x5a>
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		{
			d -= 50;
 184:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 188:	c2 97       	sbiw	r24, 0x32	; 50
 18a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 192:	c2 97       	sbiw	r24, 0x32	; 50
			if (d < 50) // delay protection
 194:	34 f4       	brge	.+12     	; 0x1a2 <main+0x5a>
 196:	82 e3       	ldi	r24, 0x32	; 50
				d = 50;
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <leds>
		}
		ledOut(leds);
 1a6:	ad df       	rcall	.-166    	; 0x102 <ledOut>
 1a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>

		waitMs(d);
 1ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	8a df       	rcall	.-236    	; 0xc6 <waitMs>
		knight_rider();
 1b2:	ac df       	rcall	.-168    	; 0x10c <knight_rider>
 1b4:	cb cf       	rjmp	.-106    	; 0x14c <main+0x4>

000001b6 <_exit>:
	}
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
