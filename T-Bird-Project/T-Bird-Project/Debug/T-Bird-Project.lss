
T-Bird-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000040e  000004a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  000004a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115b  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae9  00000000  00000000  0000171b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ef  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000592  00000000  00000000  00002b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000590  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000036aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	ce c0       	rjmp	.+412    	; 0x1de <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e0       	ldi	r30, 0x0E	; 14
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e2 d0       	rcall	.+452    	; 0x288 <main>
  c4:	a2 c1       	rjmp	.+836    	; 0x40a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <lcd_busy>:
}

void lcd_busy(void)
{
	uint8_t busy;
	LCD_DATA_DDR &= ~(1<<PE7); //ott olvassuk majd a BF-et (D7-PE7)
  c8:	82 b1       	in	r24, 0x02	; 2
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	82 b9       	out	0x02, r24	; 2
	LCD_CMD_PORT &= ~(1<<LCD_RS); //Státusz infó
  ce:	e2 e6       	ldi	r30, 0x62	; 98
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	80 83       	st	Z, r24
	LCD_CMD_PORT |= (1<<LCD_RW); //olvasás
  d8:	80 81       	ld	r24, Z
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	80 83       	st	Z, r24
	
	do{
		busy = 0;
		LCD_CMD_PORT |= (1<<LCD_EN); //EN<-1
  de:	e2 e6       	ldi	r30, 0x62	; 98
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 60       	ori	r24, 0x08	; 8
  e6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_busy+0x22>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_busy+0x28>
		_delay_us(1); //felfutó
		busy=(LCD_DATA_PIN&(1<<PE7)); //átadjuk a BF értékét
  f0:	81 b1       	in	r24, 0x01	; 1
  f2:	80 78       	andi	r24, 0x80	; 128
		LCD_CMD_PORT &= ~(1<<LCD_EN); //EN<-0
  f4:	90 81       	ld	r25, Z
  f6:	97 7f       	andi	r25, 0xF7	; 247
  f8:	90 83       	st	Z, r25
  fa:	92 e0       	ldi	r25, 0x02	; 2
  fc:	9a 95       	dec	r25
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_busy+0x34>
 100:	00 c0       	rjmp	.+0      	; 0x102 <lcd_busy+0x3a>
		_delay_us(1);
		LCD_CMD_PORT |= (1<<LCD_EN); //EN<-1
 102:	90 81       	ld	r25, Z
 104:	98 60       	ori	r25, 0x08	; 8
 106:	90 83       	st	Z, r25
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	9a 95       	dec	r25
 10c:	f1 f7       	brne	.-4      	; 0x10a <lcd_busy+0x42>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_busy+0x48>
		_delay_us(1);
		LCD_CMD_PORT &= ~(1<<LCD_EN); //EN<-0
 110:	90 81       	ld	r25, Z
 112:	97 7f       	andi	r25, 0xF7	; 247
 114:	90 83       	st	Z, r25
 116:	92 e0       	ldi	r25, 0x02	; 2
 118:	9a 95       	dec	r25
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_busy+0x50>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_busy+0x56>
		_delay_us(1);
	}while(busy);
 11e:	81 11       	cpse	r24, r1
 120:	de cf       	rjmp	.-68     	; 0xde <lcd_busy+0x16>
	
	LCD_CMD_PORT &= ~(1<<LCD_RW); //R/W<-0 write
 122:	80 81       	ld	r24, Z
 124:	8b 7f       	andi	r24, 0xFB	; 251
 126:	80 83       	st	Z, r24
	LCD_DATA_DDR |= (1<<PE7); //PE7<-1
 128:	82 b1       	in	r24, 0x02	; 2
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	82 b9       	out	0x02, r24	; 2
 12e:	08 95       	ret

00000130 <lcd_clock>:
}


void lcd_clock()
{
	LCD_CMD_PORT |= (1<<LCD_EN); //__|
 130:	e2 e6       	ldi	r30, 0x62	; 98
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 60       	ori	r24, 0x08	; 8
 138:	80 83       	st	Z, r24
 13a:	85 e0       	ldi	r24, 0x05	; 5
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_clock+0xc>
 140:	00 00       	nop
	_delay_us(2); //
	LCD_CMD_PORT &= ~(1<<LCD_EN); // |__
 142:	80 81       	ld	r24, Z
 144:	87 7f       	andi	r24, 0xF7	; 247
 146:	80 83       	st	Z, r24
 148:	85 e0       	ldi	r24, 0x05	; 5
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_clock+0x1a>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <lcd_cmd>:
	LCD_DATA_DDR |= (1<<PE7); //PE7<-1
}


void lcd_cmd(uint8_t cmd)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
	lcd_busy(); //Megvárjuk még felszabadul
 156:	b8 df       	rcall	.-144    	; 0xc8 <lcd_busy>
	LCD_CMD_PORT &= ~(1<<LCD_RS); //Parancs
 158:	e2 e6       	ldi	r30, 0x62	; 98
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	8d 7f       	andi	r24, 0xFD	; 253
 160:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_RW); //Küldés
 162:	80 81       	ld	r24, Z
 164:	8b 7f       	andi	r24, 0xFB	; 251
 166:	80 83       	st	Z, r24
	LCD_CMD_PORT &= ~(1<<LCD_EN); //EN<-0
 168:	80 81       	ld	r24, Z
 16a:	87 7f       	andi	r24, 0xF7	; 247
 16c:	80 83       	st	Z, r24
	LCD_DATA_PORT &= ~(0xF0);
 16e:	83 b1       	in	r24, 0x03	; 3
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= (cmd&0xF0); //felsõ 4 bit küldése
 174:	83 b1       	in	r24, 0x03	; 3
 176:	9c 2f       	mov	r25, r28
 178:	90 7f       	andi	r25, 0xF0	; 240
 17a:	89 2b       	or	r24, r25
	lcd_clock(); //__| |__
 17c:	83 b9       	out	0x03, r24	; 3
 17e:	d8 df       	rcall	.-80     	; 0x130 <lcd_clock>
	LCD_DATA_PORT &= ~(0xF0);
 180:	83 b1       	in	r24, 0x03	; 3
 182:	8f 70       	andi	r24, 0x0F	; 15
 184:	83 b9       	out	0x03, r24	; 3
	LCD_DATA_PORT |= ((cmd<<4)&0xF0); //alsó 4 bit küldése
 186:	23 b1       	in	r18, 0x03	; 3
 188:	30 e1       	ldi	r19, 0x10	; 16
 18a:	c3 9f       	mul	r28, r19
 18c:	c0 01       	movw	r24, r0
 18e:	11 24       	eor	r1, r1
 190:	82 2b       	or	r24, r18
	lcd_clock(); //__| |__
 192:	83 b9       	out	0x03, r24	; 3
 194:	cd df       	rcall	.-102    	; 0x130 <lcd_clock>
}
 196:	cf 91       	pop	r28
 198:	08 95       	ret

0000019a <lcd_init>:

#include "lcd.h"

void lcd_init()
{
	DDRE |= 0xF0;
 19a:	82 b1       	in	r24, 0x02	; 2
 19c:	80 6f       	ori	r24, 0xF0	; 240
 19e:	82 b9       	out	0x02, r24	; 2
	//data7...4 out
	DDRF |= (1<<LCD_RS) | (1<<LCD_RW) | (1<<LCD_EN); //RS, R/W, EN out
 1a0:	e1 e6       	ldi	r30, 0x61	; 97
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	8e 60       	ori	r24, 0x0E	; 14
 1a8:	80 83       	st	Z, r24
	//írás
	PORTF &= ~(LCD_RW);
 1aa:	e2 e6       	ldi	r30, 0x62	; 98
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	8d 7f       	andi	r24, 0xFD	; 253
 1b2:	80 83       	st	Z, r24
	//R/W<-0 ->write
	PORTF &= ~(1<<LCD_RS);
 1b4:	80 81       	ld	r24, Z
 1b6:	8d 7f       	andi	r24, 0xFD	; 253
 1b8:	80 83       	st	Z, r24
	//RS <-0 ->parancs
	PORTE = 0x20;
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	83 b9       	out	0x03, r24	; 3
	//0x20 parancs: Function set - Sets interface data length
	lcd_clock();
 1be:	b8 df       	rcall	.-144    	; 0x130 <lcd_clock>
	//delay
	lcd_clock();
 1c0:	b7 df       	rcall	.-146    	; 0x130 <lcd_clock>
	//__| |__
	lcd_clock();
 1c2:	b6 df       	rcall	.-148    	; 0x130 <lcd_clock>
	//4 bites üzemmód, 8x5pixel, 2soros
	//üzemmód választás
	//nem tudjuk, hogy bekapcsolás után éppen milyenben van
	lcd_cmd(0x28);
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	c5 df       	rcall	.-118    	; 0x152 <lcd_cmd>
	lcd_cmd(0x28);
 1c8:	88 e2       	ldi	r24, 0x28	; 40
 1ca:	c3 df       	rcall	.-122    	; 0x152 <lcd_cmd>
	lcd_cmd(0x28);
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	c1 df       	rcall	.-126    	; 0x152 <lcd_cmd>
	//lcd alaphelyzetbe
	lcd_cmd(0x02);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	bf df       	rcall	.-130    	; 0x152 <lcd_cmd>
 1d4:	81 e0       	ldi	r24, 0x01	; 1
	//lcd törlése
	lcd_cmd(0x01);
 1d6:	bd df       	rcall	.-134    	; 0x152 <lcd_cmd>
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	bb cf       	rjmp	.-138    	; 0x152 <lcd_cmd>
	//kurzor villog, aláhúzás be, LCD be
	//LCD_command(0x08 | (1<<LCD_E) | (1<<LCD_CUR) | (1<<LCD_BL));
	//kurzor villog ki, aláhúzás be, LCD be
	//LCD_command(0x08 | (1<<LCD_E) | (1<<LCD_CUR) | (0<<LCD_BL));
	//kurzor villog ki, aláhúzás ki, LCD be
	lcd_cmd(0x08 | (1<<LCD_E) | (0<<LCD_CUR) | (0<<LCD_BL));
 1dc:	08 95       	ret

000001de <__vector_16>:
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
	}
}


ISR(TIMER0_OVF_vect)
{
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	0b b6       	in	r0, 0x3b	; 59
 1ea:	0f 92       	push	r0
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	rgb_pwm_handling();
 204:	46 d0       	rcall	.+140    	; 0x292 <rgb_pwm_handling>
	
	//sevenSegment_PutNumber(timerNum);
}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	bf 91       	pop	r27
 20c:	af 91       	pop	r26
 20e:	9f 91       	pop	r25
 210:	8f 91       	pop	r24
 212:	7f 91       	pop	r23
 214:	6f 91       	pop	r22
 216:	5f 91       	pop	r21
 218:	4f 91       	pop	r20
 21a:	3f 91       	pop	r19
 21c:	2f 91       	pop	r18
 21e:	0f 90       	pop	r0
 220:	0b be       	out	0x3b, r0	; 59
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <init>:
{
	// 1 - output
	// 0 - input

	// LEDS
	DDRB &= 0x0F;	// led mask	-> 00001111 (0 - 3)
 22c:	87 b3       	in	r24, 0x17	; 23
 22e:	8f 70       	andi	r24, 0x0F	; 15
 230:	87 bb       	out	0x17, r24	; 23
	DDRB |= 0xF0;	// led		-> 11110000 (0 - 3)
 232:	87 b3       	in	r24, 0x17	; 23
 234:	80 6f       	ori	r24, 0xF0	; 240
 236:	87 bb       	out	0x17, r24	; 23
	DDRD &= 0x0F;	// led mask	-> 00001111 (0 - 3)
 238:	81 b3       	in	r24, 0x11	; 17
 23a:	8f 70       	andi	r24, 0x0F	; 15
 23c:	81 bb       	out	0x11, r24	; 17
	DDRD |= 0xF0;	// led		-> 11110000 (4 - 7)
 23e:	81 b3       	in	r24, 0x11	; 17
 240:	80 6f       	ori	r24, 0xF0	; 240
 242:	81 bb       	out	0x11, r24	; 17

	// PUSHBUTTONS
	DDRG &= 0xE0;	// Pushbuttons mask	-> 11100000	(K0 - K4)
 244:	e4 e6       	ldi	r30, 0x64	; 100
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 7e       	andi	r24, 0xE0	; 224
 24c:	80 83       	st	Z, r24
	DDRG |= 0x00;	// Pushbuttons		-> 00000000 (K0 - K4)
 24e:	80 81       	ld	r24, Z
 250:	80 83       	st	Z, r24
	
	// RGB LEDS
	DDRE &= 0xF3;	// RGB mask	-> 11110011 (Blue & Green)
 252:	82 b1       	in	r24, 0x02	; 2
 254:	83 7f       	andi	r24, 0xF3	; 243
 256:	82 b9       	out	0x02, r24	; 2
	DDRE |= 0x0C;	// RGB led	-> 00001100 (Blue & Green)
 258:	82 b1       	in	r24, 0x02	; 2
 25a:	8c 60       	ori	r24, 0x0C	; 12
 25c:	82 b9       	out	0x02, r24	; 2
	DDRC &= 0x7F;	// RGB mask	-> 01111111 (Red)
 25e:	84 b3       	in	r24, 0x14	; 20
 260:	8f 77       	andi	r24, 0x7F	; 127
 262:	84 bb       	out	0x14, r24	; 20
	DDRC |= 80;		// RGB led	-> 10000000 (Red)
 264:	84 b3       	in	r24, 0x14	; 20
 266:	80 65       	ori	r24, 0x50	; 80
 268:	84 bb       	out	0x14, r24	; 20
	
	// 7 SEGMENT DISPLAY
	DDRA = 0xFF;	// 7 Segment display
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	8a bb       	out	0x1a, r24	; 26
	
	// MATRIX KEYBOARD
	DDRC &= 0x80;	// Matrix mask	->	10000000
 26e:	84 b3       	in	r24, 0x14	; 20
 270:	80 78       	andi	r24, 0x80	; 128
 272:	84 bb       	out	0x14, r24	; 20
	DDRC |= 0x78;	// Matrix		->	01111000
 274:	84 b3       	in	r24, 0x14	; 20
 276:	88 67       	ori	r24, 0x78	; 120
 278:	84 bb       	out	0x14, r24	; 20
	
	
	// TIMER INIT 
	TCCR0 = 0 << CS02 | 0 << CS01 | 1 << CS00;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	83 bf       	out	0x33, r24	; 51
	TIMSK |= 1 << TOIE0;				// OverFlow enable
 27e:	87 b7       	in	r24, 0x37	; 55
 280:	81 60       	ori	r24, 0x01	; 1
 282:	87 bf       	out	0x37, r24	; 55
	sei();
 284:	78 94       	sei
 286:	08 95       	ret

00000288 <main>:
#pragma endregion player


int main(void)
{
	init();
 288:	d1 df       	rcall	.-94     	; 0x22c <init>
	
	lcd_init();
 28a:	87 df       	rcall	.-242    	; 0x19a <lcd_init>
	lcd_cmd(0x01);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	61 df       	rcall	.-318    	; 0x152 <lcd_cmd>
 290:	ff cf       	rjmp	.-2      	; 0x290 <main+0x8>

00000292 <rgb_pwm_handling>:
 292:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
}


void rgb_pwm_handling()
{
	if (rgb_enable)
 296:	88 23       	and	r24, r24
 298:	09 f4       	brne	.+2      	; 0x29c <rgb_pwm_handling+0xa>
 29a:	51 c0       	rjmp	.+162    	; 0x33e <rgb_pwm_handling+0xac>
	{
		pwm_counter++;
 29c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		if (pwm_counter == 255)		{	pwm_counter = 0;	}
 2a6:	8f 3f       	cpi	r24, 0xFF	; 255
 2a8:	11 f4       	brne	.+4      	; 0x2ae <rgb_pwm_handling+0x1c>
 2aa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		
		
		// Switching the RED led with PWM
		if (pwm_red >= pwm_counter)
 2ae:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end>
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	49 d0       	rcall	.+146    	; 0x34c <__floatsisf>
 2ba:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <pwm_red>
 2be:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <pwm_red+0x1>
 2c2:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <pwm_red+0x2>
 2c6:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <pwm_red+0x3>
 2ca:	3a d0       	rcall	.+116    	; 0x340 <__cmpsf2>
 2cc:	18 16       	cp	r1, r24
 2ce:	24 f0       	brlt	.+8      	; 0x2d8 <rgb_pwm_handling+0x46>
		{			
			PORTC |= (1<<PC7);
 2d0:	85 b3       	in	r24, 0x15	; 21
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	85 bb       	out	0x15, r24	; 21
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <rgb_pwm_handling+0x4c>
		}
		else
		{
			PORTC &= ~(1<<PC7);
 2d8:	85 b3       	in	r24, 0x15	; 21
 2da:	8f 77       	andi	r24, 0x7F	; 127
 2dc:	85 bb       	out	0x15, r24	; 21
		}
		
		// Switching the GREEN led with PWM
		if (pwm_green >= pwm_counter)
 2de:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end>
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	31 d0       	rcall	.+98     	; 0x34c <__floatsisf>
 2ea:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <pwm_green>
 2ee:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <pwm_green+0x1>
 2f2:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <pwm_green+0x2>
 2f6:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <pwm_green+0x3>
 2fa:	22 d0       	rcall	.+68     	; 0x340 <__cmpsf2>
 2fc:	18 16       	cp	r1, r24
 2fe:	24 f0       	brlt	.+8      	; 0x308 <rgb_pwm_handling+0x76>
		{
			PORTE |= (1<<PE2);
 300:	83 b1       	in	r24, 0x03	; 3
 302:	84 60       	ori	r24, 0x04	; 4
 304:	83 b9       	out	0x03, r24	; 3
 306:	03 c0       	rjmp	.+6      	; 0x30e <rgb_pwm_handling+0x7c>
		}
		else
		{
			PORTE &=~ (1<<PE2);
 308:	83 b1       	in	r24, 0x03	; 3
 30a:	8b 7f       	andi	r24, 0xFB	; 251
 30c:	83 b9       	out	0x03, r24	; 3
		}
		
		// Switching the BLUE led with PWM
		if (pwm_blue >= pwm_counter)
 30e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end>
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	19 d0       	rcall	.+50     	; 0x34c <__floatsisf>
 31a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <pwm_blue>
 31e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <pwm_blue+0x1>
 322:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <pwm_blue+0x2>
 326:	50 91 06 01 	lds	r21, 0x0106	; 0x800106 <pwm_blue+0x3>
 32a:	0a d0       	rcall	.+20     	; 0x340 <__cmpsf2>
 32c:	18 16       	cp	r1, r24
 32e:	24 f0       	brlt	.+8      	; 0x338 <rgb_pwm_handling+0xa6>
		{
			PORTE |= (1<<PE3);
 330:	83 b1       	in	r24, 0x03	; 3
 332:	88 60       	ori	r24, 0x08	; 8
 334:	83 b9       	out	0x03, r24	; 3
 336:	08 95       	ret
		}
		else
		{
			PORTE &=~ (1<<PE3);
 338:	83 b1       	in	r24, 0x03	; 3
 33a:	87 7f       	andi	r24, 0xF7	; 247
 33c:	83 b9       	out	0x03, r24	; 3
 33e:	08 95       	ret

00000340 <__cmpsf2>:
 340:	40 d0       	rcall	.+128    	; 0x3c2 <__fp_cmp>
 342:	08 f4       	brcc	.+2      	; 0x346 <__cmpsf2+0x6>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	08 95       	ret

00000348 <__floatunsisf>:
 348:	e8 94       	clt
 34a:	09 c0       	rjmp	.+18     	; 0x35e <__floatsisf+0x12>

0000034c <__floatsisf>:
 34c:	97 fb       	bst	r25, 7
 34e:	3e f4       	brtc	.+14     	; 0x35e <__floatsisf+0x12>
 350:	90 95       	com	r25
 352:	80 95       	com	r24
 354:	70 95       	com	r23
 356:	61 95       	neg	r22
 358:	7f 4f       	sbci	r23, 0xFF	; 255
 35a:	8f 4f       	sbci	r24, 0xFF	; 255
 35c:	9f 4f       	sbci	r25, 0xFF	; 255
 35e:	99 23       	and	r25, r25
 360:	a9 f0       	breq	.+42     	; 0x38c <__floatsisf+0x40>
 362:	f9 2f       	mov	r31, r25
 364:	96 e9       	ldi	r25, 0x96	; 150
 366:	bb 27       	eor	r27, r27
 368:	93 95       	inc	r25
 36a:	f6 95       	lsr	r31
 36c:	87 95       	ror	r24
 36e:	77 95       	ror	r23
 370:	67 95       	ror	r22
 372:	b7 95       	ror	r27
 374:	f1 11       	cpse	r31, r1
 376:	f8 cf       	rjmp	.-16     	; 0x368 <__floatsisf+0x1c>
 378:	fa f4       	brpl	.+62     	; 0x3b8 <__floatsisf+0x6c>
 37a:	bb 0f       	add	r27, r27
 37c:	11 f4       	brne	.+4      	; 0x382 <__floatsisf+0x36>
 37e:	60 ff       	sbrs	r22, 0
 380:	1b c0       	rjmp	.+54     	; 0x3b8 <__floatsisf+0x6c>
 382:	6f 5f       	subi	r22, 0xFF	; 255
 384:	7f 4f       	sbci	r23, 0xFF	; 255
 386:	8f 4f       	sbci	r24, 0xFF	; 255
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	16 c0       	rjmp	.+44     	; 0x3b8 <__floatsisf+0x6c>
 38c:	88 23       	and	r24, r24
 38e:	11 f0       	breq	.+4      	; 0x394 <__floatsisf+0x48>
 390:	96 e9       	ldi	r25, 0x96	; 150
 392:	11 c0       	rjmp	.+34     	; 0x3b6 <__floatsisf+0x6a>
 394:	77 23       	and	r23, r23
 396:	21 f0       	breq	.+8      	; 0x3a0 <__floatsisf+0x54>
 398:	9e e8       	ldi	r25, 0x8E	; 142
 39a:	87 2f       	mov	r24, r23
 39c:	76 2f       	mov	r23, r22
 39e:	05 c0       	rjmp	.+10     	; 0x3aa <__floatsisf+0x5e>
 3a0:	66 23       	and	r22, r22
 3a2:	71 f0       	breq	.+28     	; 0x3c0 <__floatsisf+0x74>
 3a4:	96 e8       	ldi	r25, 0x86	; 134
 3a6:	86 2f       	mov	r24, r22
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	60 e0       	ldi	r22, 0x00	; 0
 3ac:	2a f0       	brmi	.+10     	; 0x3b8 <__floatsisf+0x6c>
 3ae:	9a 95       	dec	r25
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	da f7       	brpl	.-10     	; 0x3ae <__floatsisf+0x62>
 3b8:	88 0f       	add	r24, r24
 3ba:	96 95       	lsr	r25
 3bc:	87 95       	ror	r24
 3be:	97 f9       	bld	r25, 7
 3c0:	08 95       	ret

000003c2 <__fp_cmp>:
 3c2:	99 0f       	add	r25, r25
 3c4:	00 08       	sbc	r0, r0
 3c6:	55 0f       	add	r21, r21
 3c8:	aa 0b       	sbc	r26, r26
 3ca:	e0 e8       	ldi	r30, 0x80	; 128
 3cc:	fe ef       	ldi	r31, 0xFE	; 254
 3ce:	16 16       	cp	r1, r22
 3d0:	17 06       	cpc	r1, r23
 3d2:	e8 07       	cpc	r30, r24
 3d4:	f9 07       	cpc	r31, r25
 3d6:	c0 f0       	brcs	.+48     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3d8:	12 16       	cp	r1, r18
 3da:	13 06       	cpc	r1, r19
 3dc:	e4 07       	cpc	r30, r20
 3de:	f5 07       	cpc	r31, r21
 3e0:	98 f0       	brcs	.+38     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e2:	62 1b       	sub	r22, r18
 3e4:	73 0b       	sbc	r23, r19
 3e6:	84 0b       	sbc	r24, r20
 3e8:	95 0b       	sbc	r25, r21
 3ea:	39 f4       	brne	.+14     	; 0x3fa <__fp_cmp+0x38>
 3ec:	0a 26       	eor	r0, r26
 3ee:	61 f0       	breq	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3f0:	23 2b       	or	r18, r19
 3f2:	24 2b       	or	r18, r20
 3f4:	25 2b       	or	r18, r21
 3f6:	21 f4       	brne	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
 3f8:	08 95       	ret
 3fa:	0a 26       	eor	r0, r26
 3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	a1 40       	sbci	r26, 0x01	; 1
 400:	a6 95       	lsr	r26
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	81 1d       	adc	r24, r1
 406:	81 1d       	adc	r24, r1
 408:	08 95       	ret

0000040a <_exit>:
 40a:	f8 94       	cli

0000040c <__stop_program>:
 40c:	ff cf       	rjmp	.-2      	; 0x40c <__stop_program>
